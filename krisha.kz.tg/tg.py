import logging
from datetime import datetime, timedelta
import re
import os
from dotenv import load_dotenv
import atexit
import errno
import sys
import time
import json
import random

from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, DateTime, ForeignKey, JSON, UniqueConstraint, func, BigInteger
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, scoped_session
from sqlalchemy.sql import text
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler
from telegram.error import Conflict

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã
TOKEN = os.getenv("TELEGRAM_TOKEN", "7866153858:AAFMpL-XejNmlJdkgc9D6ExC1H6hkQeBPvY")
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://postgres:postgres@localhost/krisha")
ADMIN_TELEGRAM_ID = int(os.getenv("ADMIN_TELEGRAM_ID", "0"))  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

logger.info(f"Using Telegram Token: {TOKEN[:5]}...{TOKEN[-5:]}")
logger.info(f"Admin Telegram ID: {ADMIN_TELEGRAM_ID}")
logger.info(f"Database URL: {DATABASE_URL}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL)
session_factory = sessionmaker(bind=engine)
Session = scoped_session(session_factory)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
class User(Base):
    __tablename__ = "telegram_users"

    id = Column(Integer, primary_key=True)
    telegram_id = Column(BigInteger, unique=True, index=True)
    username = Column(String, nullable=True)
    first_name = Column(String)
    last_name = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.now)

    filters = relationship("UserFilter", back_populates="user", cascade="all, delete-orphan")
    notifications = relationship("NotificationSetting", back_populates="user", cascade="all, delete-orphan")
    sent_properties = relationship("SentProperty", back_populates="user", cascade="all, delete-orphan")


class UserFilter(Base):
    __tablename__ = "user_filters"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("telegram_users.id"))
    year_min = Column(Integer, nullable=True)
    year_max = Column(Integer, nullable=True)
    districts = Column(JSON, default=lambda: ["–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π", "–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π", "–ú–µ–¥–µ—É—Å–∫–∏–π", "–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π"])
    not_first_floor = Column(Boolean, default=True)
    not_last_floor = Column(Boolean, default=True)
    min_floor = Column(Integer, nullable=True)
    max_floor = Column(Integer, nullable=True)
    rooms_min = Column(Integer, nullable=True)
    rooms_max = Column(Integer, nullable=True)
    price_min = Column(Integer, nullable=True)
    price_max = Column(Integer, nullable=True)
    area_min = Column(Integer, nullable=True)
    area_max = Column(Integer, nullable=True)
    max_market_price_percent = Column(Float, default=0.0)
    city = Column(String, nullable=True)
    address = Column(String, nullable=True)

    user = relationship("User", back_populates="filters")


class NotificationSetting(Base):
    __tablename__ = "notification_settings"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("telegram_users.id"))
    frequency_type = Column(String, default="daily")  # daily, hourly, custom
    hour = Column(Integer, default=10)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 10 —É—Ç—Ä–∞
    minute = Column(Integer, default=0)
    interval_hours = Column(Integer, default=1)  # –î–ª—è hourly —Ä–µ–∂–∏–º–∞
    enabled = Column(Boolean, default=True)
    last_sent_at = Column(DateTime, nullable=True)

    user = relationship("User", back_populates="notifications")


class SentProperty(Base):
    __tablename__ = "sent_properties"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("telegram_users.id"))
    property_id = Column(Integer)  # ID –æ–±—ä—è–≤–ª–µ–Ω–∏—è
    sent_at = Column(DateTime, default=datetime.now)

    user = relationship("User", back_populates="sent_properties")

    # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–∞—Ä—ã user_id –∏ property_id
    __table_args__ = (
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–∞–µ–º –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–≤–∞–∂–¥—ã
        UniqueConstraint('user_id', 'property_id', name='uq_user_property'),
    )


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    FILTER_MENU,
    YEAR_MIN,
    YEAR_MAX,
    DISTRICTS,
    FLOOR_SETTINGS,
    MIN_FLOOR,
    MAX_FLOOR,
    ROOMS,
    PRICE_RANGE,
    AREA_RANGE,
    MARKET_PERCENT,
    CITY,
    ADDRESS,
    NOTIFICATION_MENU,
    NOTIFICATION_TYPE,
    NOTIFICATION_TIME,
    NOTIFICATION_INTERVAL,
    RESET_FILTERS,
    ADMIN_BROADCAST
) = range(20)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard(is_admin=False):
    keyboard = [
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤")],
        [KeyboardButton("üëÅÔ∏è –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã")],
        [KeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("üì© –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")],
        [KeyboardButton("üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    
    # Add admin-only options
    if is_admin:
        keyboard.append([KeyboardButton("üõ†Ô∏è –ê–¥–º–∏–Ω: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º")])
        keyboard.append([KeyboardButton("üìà –ê–¥–º–∏–Ω: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")])
    
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_filter_menu_keyboard():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    keyboard = [
        [
            InlineKeyboardButton("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", callback_data="filter_year"),
            InlineKeyboardButton("–†–∞–π–æ–Ω—ã", callback_data="filter_districts")
        ],
        [
            InlineKeyboardButton("–≠—Ç–∞–∂–∏", callback_data="filter_floors"),
            InlineKeyboardButton("–ö–æ–º–Ω–∞—Ç—ã", callback_data="filter_rooms")
        ],
        [
            InlineKeyboardButton("–¶–µ–Ω–∞", callback_data="filter_price"),
            InlineKeyboardButton("–ü–ª–æ—â–∞–¥—å", callback_data="filter_area")
        ],
        [
            InlineKeyboardButton("% –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π", callback_data="filter_market")
        ],
        [
            InlineKeyboardButton("–ì–æ—Ä–æ–¥", callback_data="filter_city"),
            InlineKeyboardButton("–ê–¥—Ä–µ—Å", callback_data="filter_address")
        ],
        [
            InlineKeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_notification_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üïí –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notif_type")],
        [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notif_time")],
        [InlineKeyboardButton("‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª (–¥–ª—è hourly)", callback_data="notif_interval")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏", callback_data="save_notifications")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_notification_type_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="type_daily")],
        [InlineKeyboardButton("üïê –ö–∞–∂–¥—ã–π —á–∞—Å", callback_data="type_hourly")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_notif_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def extract_year_from_description(description):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    if not description:
        return None

    year_patterns = [
        r'–≥–æ–¥\s+–ø–æ—Å—Ç—Ä–æ–π–∫–∏[:\s]+(\d{4})',
        r'–ø–æ—Å—Ç—Ä–æ–µ–Ω[–∞]?\s+–≤\s+(\d{4})',
        r'(\d{4})\s+–≥–æ–¥[–∞]?\s+–ø–æ—Å—Ç—Ä–æ–π–∫–∏',
        r'–¥–æ–º\s+(\d{4})\s+–≥–æ–¥[–∞]?'
    ]

    for pattern in year_patterns:
        match = re.search(pattern, description.lower())
        if match:
            year = int(match.group(1))
            if 1900 <= year <= 2023:
                return year

    return None


def extract_floor_info(description):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–∂–µ –∏ –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —ç—Ç–∞–∂–µ–π –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è."""
    if not description:
        return None, None

    # –û—Å–Ω–æ–≤–Ω–æ–π —à–∞–±–ª–æ–Ω: —á–∏—Å–ª–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ / –∏–ª–∏ "–∏–∑" (–Ω–∞–ø—Ä–∏–º–µ—Ä "5/9" –∏–ª–∏ "5 —ç—Ç–∞–∂ –∏–∑ 9")
    floor_patterns = [
        r'(\d+)(?:\s*[-/]\s*|\s+—ç—Ç–∞–∂\s+–∏–∑\s+)(\d+)',  # 5/9, 5-9, 5 —ç—Ç–∞–∂ –∏–∑ 9
        r'(\d+)\s*(?:—ç—Ç–∞–∂|—ç—Ç)[.,]?\s+–∏–∑\s+(\d+)',     # 5 —ç—Ç–∞–∂ –∏–∑ 9, 5—ç—Ç. –∏–∑ 9
        r'(\d+)\s*[-/]\s*(\d+)\s*—ç—Ç',                 # 5/9 —ç—Ç, 5-9 —ç—Ç
        r'(\d+)\s*[-/]\s*(\d+)',                      # –ø—Ä–æ—Å—Ç–æ 5/9 –∏–ª–∏ 5-9
        r'(\d+)\s+—ç—Ç(?:–∞–∂|\.)\s+–≤\s+(\d+)-?—ç—Ç–∞–∂',     # 5 —ç—Ç–∞–∂ –≤ 9-—ç—Ç–∞–∂–Ω–æ–º
        r'(\d+)\s+—ç—Ç(?:–∞–∂|\.)[,]?\s+(\d+)-?—ç—Ç',       # 5 —ç—Ç–∞–∂, 9-—ç—Ç–∞–∂–Ω—ã–π
    ]

    for pattern in floor_patterns:
        match = re.search(pattern, description.lower())
        if match:
            try:
                floor = int(match.group(1))
                total = int(match.group(2))
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
                if 0 < floor <= total:
                    return floor, total
            except (ValueError, IndexError):
                pass

    return None, None


def get_district_from_address(address):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–π–æ–Ω –ø–æ –∞–¥—Ä–µ—Å—É."""
    if not address:
        return None

    districts = {
        "–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π": ["–∞–ª–º–∞–ª–∏–Ω—Å–∫", "–∞–ª–º–∞—Ç—ã", "–∞–±–∞—è", "–¥–æ—Å—Ç—ã–∫", "–∂–∏–±–µ–∫ –∂–æ–ª—ã"],
        "–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π": ["–±–æ—Å—Ç–∞–Ω–¥—ã–∫", "—Ç–∏–º–∏—Ä—è–∑–µ–≤", "—Ä–æ–∑—ã–±–∞–∫–∏–µ–≤", "–∞–ª—å-—Ñ–∞—Ä–∞–±–∏"],
        "–ú–µ–¥–µ—É—Å–∫–∏–π": ["–º–µ–¥–µ—É", "–∫–æ–∫-—Ç–æ–±–µ", "–¥–æ—Å—Ç—ã–∫", "–≥–æ—Ä–Ω—ã–π"],
        "–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π": ["–∂–µ—Ç—ã—Å—É", "–∫—É–ª—å–¥–∂–∏–Ω—Å–∫", "–ø–∞–ª–ª–∞–¥–∏—É–º"]
    }

    address_lower = address.lower()

    for district, keywords in districts.items():
        for keyword in keywords:
            if keyword in address_lower:
                return district

    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user = update.effective_user
    is_admin = user.id == ADMIN_TELEGRAM_ID
    
    # Log if admin
    if is_admin:
        logger.info(f"Admin user {user.id} ({user.username}) started the bot")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    db = Session()
    try:
        db_user = db.query(User).filter(User.telegram_id == user.id).first()
        if not db_user:
            db_user = User(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            db.add(db_user)

            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_filter = UserFilter(user=db_user)
            db.add(default_filter)

            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_notification = NotificationSetting(user=db_user)
            db.add(default_notification)

            db.commit()

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. "
            "–ù–∞—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏ —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.",
            reply_markup=get_main_keyboard(is_admin=is_admin)
        )
        return MAIN_MENU
    finally:
        db.close()


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    user = update.effective_user
    is_admin = user.id == ADMIN_TELEGRAM_ID
    
    # Check if this is a message or callback query
    if update.message:
        text = update.message.text
        reply_method = update.message.reply_text
    elif update.callback_query:
        await update.callback_query.answer()
        text = update.callback_query.data
        reply_method = update.callback_query.message.reply_text
    else:
        # If neither, return to main menu
        logger.error("Received update is neither message nor callback query")
        return MAIN_MENU
        
    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤":
        await reply_method(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    elif text == "üëÅÔ∏è –ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
        await show_current_filters(update, context)
        return MAIN_MENU
    elif text == "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await reply_method(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_menu_keyboard()
        )
        return NOTIFICATION_MENU
    elif text == "üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π":
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await search_properties(update, context)
        return MAIN_MENU
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await show_statistics(update, context)
        return MAIN_MENU
    elif text == "üì© –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await test_notification(update, context)
        return MAIN_MENU
    elif text == "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await reset_sent_properties(update, context)
        return MAIN_MENU
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        await reply_method(
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n\n"
            "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤'\n"
            "2. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã'\n"
            "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π' –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
            "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n"
            "6. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –≤–∏–¥–µ–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é'\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        return MAIN_MENU
    # Admin-only options
    elif text == "üõ†Ô∏è –ê–¥–º–∏–Ω: –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º" and is_admin:
        await reply_method(
            "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:"
        )
        return ADMIN_BROADCAST
    elif text == "üìà –ê–¥–º–∏–Ω: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" and is_admin:
        await admin_overall_statistics(update, context)
        return MAIN_MENU
    else:
        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-—Ñ—É–Ω–∫—Ü–∏—è–º –Ω–µ-–∞–¥–º–∏–Ω–æ–º
        if text.startswith("üõ†Ô∏è –ê–¥–º–∏–Ω:") or text.startswith("üìà –ê–¥–º–∏–Ω:"):
            if not is_admin:
                logger.warning(f"Non-admin user {user.id} tried to access admin function: {text}")
                await reply_method("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        else:
            await reply_method("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")
        
        return MAIN_MENU


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async def handle_filter_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()

    print("sdjkasdlksad;asdks;aldkas;ldsa;dlasd;lskd;lsadka;ldsd;lkasd;askd;alsdsa;ldsa")
    data = query.data

    if data == "filter_year":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1977):"
        )
        return YEAR_MIN
    elif data == "filter_districts":
        # Change from selection to text input
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞–π–æ–Ω–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π, –ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π'):"
        )
        return DISTRICTS
    elif data == "filter_floors":
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂", callback_data="toggle_not_first")],
                [InlineKeyboardButton("–ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂", callback_data="toggle_not_last")],
                [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —ç—Ç–∞–∂–µ–π", callback_data="set_floor_range")],
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="floors_done")]
            ])
        )
        return FLOOR_SETTINGS
    elif data == "filter_rooms":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-3 –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç 1 –¥–æ 3 –∫–æ–º–Ω–∞—Ç):"
        )
        return ROOMS
    elif data == "filter_price":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å –≤ –º–∏–ª–ª–∏–æ–Ω–∞—Ö —Ç–µ–Ω–≥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15000000-30000000 –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç 15000000 –¥–æ 30000000):"
        )
        return PRICE_RANGE
    elif data == "filter_area":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 40-80):"
        )
        return AREA_RANGE
    elif data == "filter_market":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 90 –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–µ—à–µ–≤–ª–µ –Ω–∞ 10% –æ—Ç —Ä—ã–Ω–∫–∞):"
        )
        return MARKET_PERCENT
    elif data == "filter_city":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–ª–º–∞—Ç—ã', '–ê—Å—Ç–∞–Ω–∞'):"
        )
        return CITY
    elif data == "filter_address":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ (—É–ª–∏—Ü—É, —Ä–∞–π–æ–Ω, –º–∏–∫—Ä–æ—Ä–∞–π–æ–Ω):"
        )
        return ADDRESS
    elif data == "back_to_menu":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return MAIN_MENU
    elif data.startswith("toggle_"):
        option = data.replace("toggle_", "")

        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            user_filter = user.filters[0] if user and user.filters else None

            if user_filter:
                if option == "not_first":
                    user_filter.not_first_floor = not user_filter.not_first_floor
                elif option == "not_last":
                    user_filter.not_last_floor = not user_filter.not_last_floor

                db.commit()

            not_first = user_filter.not_first_floor if user_filter else True
            not_last = user_filter.not_last_floor if user_filter else True

            await query.edit_message_text(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏:\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"{'‚úÖ' if not_first else '‚ùå'} –ù–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂",
                                          callback_data="toggle_not_first")],
                    [InlineKeyboardButton(f"{'‚úÖ' if not_last else '‚ùå'} –ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂",
                                          callback_data="toggle_not_last")],
                    [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —ç—Ç–∞–∂–µ–π", callback_data="set_floor_range")],
                    [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="floors_done")]
                ])
            )
            return FLOOR_SETTINGS
        finally:
            db.close()
    elif data == "set_floor_range":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):"
        )
        return MIN_FLOOR
    elif data == "floors_done":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU


async def handle_year_min(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏."""
    try:
        year = int(update.message.text)
        if 1900 <= year <= 2025:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data["year_min"] = year

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].year_min = year
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):"
            )
            return YEAR_MAX
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 1900 –¥–æ 2025:"
            )
            return YEAR_MIN
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:"
        )
        return YEAR_MIN


async def handle_year_max(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏."""
    try:
        year = int(update.message.text)
        year_min = context.user_data.get("year_min", 1977)

        if 1900 <= year <= 2025 and year >= year_min:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].year_max = year
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_filter_menu_keyboard()  # –î–æ–±–∞–≤—å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            return FILTER_MENU  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        else:
            await update.message.reply_text(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç {year_min} –¥–æ 2023:"
            )
            return YEAR_MAX
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:"
        )
        return YEAR_MAX


async def handle_min_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞."""
    try:
        floor = int(update.message.text)
        if floor >= 0:
            context.user_data["min_floor"] = floor

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].min_floor = floor if floor > 0 else None
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):"
            )
            return MAX_FLOOR
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –∏ –≤—ã—à–µ:"
            )
            return MIN_FLOOR
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:"
        )
        return MIN_FLOOR


async def handle_max_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞."""
    try:
        floor = int(update.message.text)
        min_floor = context.user_data.get("min_floor", 0)

        if floor >= 0 and (floor >= min_floor or floor == 0):
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].max_floor = floor if floor > 0 else None
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_filter_menu_keyboard()
            )
            return FILTER_MENU
        else:
            await update.message.reply_text(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min_floor} –∏ –≤—ã—à–µ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):"
            )
            return MAX_FLOOR
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:"
        )
        return MAX_FLOOR


async def handle_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç."""
    text = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1-3")
    range_pattern = r'^(\d+)[-‚Äì](\d+)$'
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2")
    single_pattern = r'^(\d+)$'

    range_match = re.match(range_pattern, text)
    single_match = re.match(single_pattern, text)

    if range_match:
        min_rooms = int(range_match.group(1))
        max_rooms = int(range_match.group(2))

        if min_rooms > max_rooms:
            min_rooms, max_rooms = max_rooms, min_rooms

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.filters:
                user.filters[0].rooms_min = min_rooms
                user.filters[0].rooms_max = max_rooms
                db.commit()
        finally:
            db.close()

        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç: –æ—Ç {min_rooms} –¥–æ {max_rooms}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    elif single_match:
        rooms = int(single_match.group(1))

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.filters:
                user.filters[0].rooms_min = rooms
                user.filters[0].rooms_max = rooms
                db.commit()
        finally:
            db.close()

        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç: —Ä–æ–≤–Ω–æ {rooms}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2' –∏–ª–∏ '1-3'):"
        )
        return ROOMS


async def handle_price_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω."""
    text = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15-30")
    range_pattern = r'^(\d+(?:\.\d+)?)[-‚Äì](\d+(?:\.\d+)?)$'
    match = re.match(range_pattern, text)

    if match:
        min_price = float(match.group(1))
        max_price = float(match.group(2))

        if min_price > max_price:
            min_price, max_price = max_price, min_price

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.filters:
                user.filters[0].price_min = int(min_price)
                user.filters[0].price_max = int(max_price)
                db.commit()
        finally:
            db.close()

        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω: –æ—Ç {int(min_price)} –¥–æ {int(max_price)} –º–ª–Ω —Ç–µ–Ω–≥–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15000000-3000000'):"
        )
        return PRICE_RANGE


async def handle_area_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–ª–æ—â–∞–¥–∏."""
    text = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "40-80")
    range_pattern = r'^(\d+(?:\.\d+)?)[-‚Äì](\d+(?:\.\d+)?)$'
    match = re.match(range_pattern, text)

    if match:
        min_area = float(match.group(1))
        max_area = float(match.group(2))

        if min_area > max_area:
            min_area, max_area = max_area, min_area

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.filters:
                user.filters[0].area_min = int(min_area)
                user.filters[0].area_max = int(max_area)
                db.commit()
        finally:
            db.close()

        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–ª–æ—â–∞–¥–∏: –æ—Ç {int(min_area)} –¥–æ {int(max_area)} –∫–≤.–º. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '40-80'):"
        )
        return AREA_RANGE


async def handle_market_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã."""
    try:
        percent = float(update.message.text)
        if 0 < percent <= 100:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].max_market_price_percent = percent
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã: {percent}%. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_filter_menu_keyboard()
            )
            return FILTER_MENU
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 1 –¥–æ 100:"
            )
            return MARKET_PERCENT
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:"
        )
        return MARKET_PERCENT


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_notification_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "notif_type":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_type_keyboard()
        )
        return NOTIFICATION_TYPE
    elif data == "notif_time":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00):"
        )
        return NOTIFICATION_TIME
    elif data == "notif_interval":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –¥–ª—è –∫–∞–∂–¥—ã–π —á–∞—Å, 2 –¥–ª—è –∫–∞–∂–¥—ã–µ –¥–≤–∞ —á–∞—Å–∞):"
        )
        return NOTIFICATION_INTERVAL
    elif data == "save_notifications":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return MAIN_MENU
    elif data == "back_to_notif_menu":
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_menu_keyboard()
        )
        return NOTIFICATION_MENU
    elif data.startswith("type_"):
        notification_type = data.replace("type_", "")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.notifications:
                user.notifications[0].frequency_type = notification_type
                db.commit()

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                restart_user_scheduler(user.telegram_id)
        finally:
            db.close()

        await query.edit_message_text(
            f"–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {notification_type}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_menu_keyboard()
        )
        return NOTIFICATION_MENU


async def handle_notification_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    text = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10:00")
    time_pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
    match = re.match(time_pattern, text)

    if match:
        hour = int(match.group(1))
        minute = int(match.group(2))

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.notifications:
                user.notifications[0].hour = hour
                user.notifications[0].minute = minute
                db.commit()

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                restart_user_scheduler(user.telegram_id)
        finally:
            db.close()

        await update.message.reply_text(
            f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {hour:02d}:{minute:02d}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_menu_keyboard()
        )
        return NOTIFICATION_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00):"
        )
        return NOTIFICATION_TIME


async def handle_notification_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        interval = int(update.message.text)
        if 1 <= interval <= 24:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.notifications:
                    user.notifications[0].interval_hours = interval
                    db.commit()

                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    restart_user_scheduler(user.telegram_id)
            finally:
                db.close()

            await update.message.reply_text(
                f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫–∞–∂–¥—ã–µ {interval} —á. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
                reply_markup=get_notification_menu_keyboard()
            )
            return NOTIFICATION_MENU
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤:"
            )
            return NOTIFICATION_INTERVAL
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:"
        )
        return NOTIFICATION_INTERVAL


async def search_properties(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        if not user or not user.filters:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
            )
            return

        user_filter = user.filters[0]

        # –°—Ç—Ä–æ–∏–º SQL-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = """
                SELECT f.id, f.url, f.room, f.square, f.address, f.description, f.title,
                       p.price, p.green_percentage
                FROM flats f
                JOIN (
                    SELECT flat_id, price, green_percentage
                    FROM prices
                    WHERE (flat_id, date) IN (
                        SELECT flat_id, MAX(date) 
                        FROM prices 
                        GROUP BY flat_id
                    )
                ) p ON f.id = p.flat_id
                WHERE 1=1
                """

        params = {}

        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥—É –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
        if user_filter.year_min is not None and user_filter.year_max is not None:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —à–∞–±–ª–æ–Ω—É "2020 –≥.–ø." –∏ –¥—Ä—É–≥–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∞–º 
            # —Å —É—á–µ—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –≥–æ–¥–æ–≤
            pattern_parts = []
            for year in range(user_filter.year_min, user_filter.year_max + 1):
                pattern_parts.append(f"{year} –≥.–ø.")
                pattern_parts.append(f"{year}–≥.–ø")
                pattern_parts.append(f"{year} –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏")
                pattern_parts.append(f"{year}–≥. –ø–æ—Å—Ç—Ä–æ–π–∫–∏")
                pattern_parts.append(f"–ø–æ—Å—Ç—Ä–æ–µ–Ω –≤ {year}")
            
            # –°–æ–∑–¥–∞–µ–º LIKE —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
            year_conditions = " OR ".join([f"f.description ILIKE '%{pattern}%'" for pattern in pattern_parts])
            query += f" AND ({year_conditions})"
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Ä–∞–π–æ–Ω—É
        if user_filter.districts and len(user_filter.districts) > 0:
            district_conditions = []
            for district in user_filter.districts:
                district_conditions.append(f"f.description ILIKE '%{district}%'")
                district_conditions.append(f"f.address ILIKE '%{district}%'")
                district_conditions.append(f"f.title ILIKE '%{district}%'")
            
            if district_conditions:
                query += f" AND ({' OR '.join(district_conditions)})"
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —ç—Ç–∞–∂—É –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
        if user_filter.min_floor is not None or user_filter.max_floor is not None or user_filter.not_first_floor or user_filter.not_last_floor:
            floor_conditions = []
            
            # –î–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —ç—Ç–∞–∂–µ–π
            if user_filter.min_floor is not None and user_filter.max_floor is not None:
                for floor in range(user_filter.min_floor, user_filter.max_floor + 1):
                    floor_conditions.append(f"f.title ILIKE '%{floor}/%'")
                    floor_conditions.append(f"f.description ILIKE '%{floor} —ç—Ç–∞–∂%'")
                    floor_conditions.append(f"f.description ILIKE '%{floor}-–π —ç—Ç–∞–∂%'")
            
            # –ù–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂
            if user_filter.not_first_floor:
                query += " AND f.title NOT ILIKE '%1/%' AND f.description NOT ILIKE '%1 —ç—Ç–∞–∂%' AND f.description NOT ILIKE '%1-–π —ç—Ç–∞–∂%'"
            
            # –ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂ (—Ç—Ä—É–¥–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ SQL, –±—É–¥–µ–º –ø—Ä–æ–≤–µ—Ä—è—Ç—å —ç—Ç–æ –≤ Python)
            
            if floor_conditions:
                query += f" AND ({' OR '.join(floor_conditions)})"

        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        if user_filter.rooms_min is not None:
            query += " AND f.room >= :rooms_min"
            params["rooms_min"] = user_filter.rooms_min

        if user_filter.rooms_max is not None:
            query += " AND f.room <= :rooms_max"
            params["rooms_max"] = user_filter.rooms_max

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if user_filter.price_min is not None:
            query += " AND p.price >= :price_min"
            params["price_min"] = user_filter.price_min

        if user_filter.price_max is not None:
            query += " AND p.price <= :price_max"
            params["price_max"] = user_filter.price_max

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏
        if user_filter.area_min is not None:
            query += " AND f.square >= :area_min"
            params["area_min"] = user_filter.area_min

        if user_filter.area_max is not None:
            query += " AND f.square <= :area_max"
            params["area_max"] = user_filter.area_max

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
        if user_filter.max_market_price_percent is not None:
            query += " AND p.green_percentage >= :market_percent"
            params["market_percent"] = user_filter.max_market_price_percent

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
        query += " ORDER BY p.green_percentage DESC LIMIT 10"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        try:
            # –ü–µ—Ä–µ–¥–µ–ª—ã–≤–∞–µ–º —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤ –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –±–µ–∑ –ø—Ä—è–º–æ–π –≤—Å—Ç–∞–≤–∫–∏ –∑–Ω–∞—á–µ–Ω–∏–π –≤ SQL
            # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è LIKE, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
            safe_query = query
            result = db.execute(text(safe_query), params).fetchall()
        except Exception as e:
            logger.error(f"SQL error: {e}")
            # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ —Å SQL, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            basic_query = """
                    SELECT f.id, f.url, f.room, f.square, f.address, f.description, f.title,
                           p.price, p.green_percentage
                    FROM flats f
                    JOIN (
                        SELECT flat_id, price, green_percentage
                        FROM prices
                        WHERE (flat_id, date) IN (
                            SELECT flat_id, MAX(date)
                            FROM prices
                            GROUP BY flat_id
                        )
                    ) p ON f.id = p.flat_id
                    WHERE 1=1
                    """
            params.pop("sent_property_ids", None)
            
            for key, value in params.items():
                if key in ["rooms_min", "price_min", "area_min", "market_percent"]:
                    basic_query += f" AND {key.replace(':', '')} >= :{key}"
                elif key in ["rooms_max", "price_max", "area_max"]:
                    basic_query += f" AND {key.replace(':', '')} <= :{key}"
            
            basic_query += " ORDER BY p.green_percentage ASC LIMIT 20"
            result = db.execute(text(basic_query), params).fetchall()
            
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥—É –∏ —Ä–∞–π–æ–Ω—É –≤ Python
        filtered_results = []
        for row in result:
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
            if row.id in sent_property_ids:
                continue
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            year = extract_year_from_description(row.description)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–π–æ–Ω –ø–æ –∞–¥—Ä–µ—Å—É
            district = get_district_from_address(row.address)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            year_matches = True
            if year is not None and user_filter.year_min is not None and year < user_filter.year_min:
                year_matches = False
            if year is not None and user_filter.year_max is not None and year > user_filter.year_max:
                year_matches = False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –≤ –≤–∏–¥–µ "YYYY –≥.–ø."
            if user_filter.year_min is not None and user_filter.year_max is not None:
                # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –±—ã–ª –∏–∑–≤–ª–µ—á–µ–Ω, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
                if year is None:
                    year_matches_pattern = False
                    for year_check in range(user_filter.year_min, user_filter.year_max + 1):
                        if (f"{year_check} –≥.–ø." in row.description.lower() or 
                            f"{year_check}–≥.–ø" in row.description.lower() or
                            f"{year_check} –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏" in row.description.lower() or
                            f"–ø–æ—Å—Ç—Ä–æ–µ–Ω –≤ {year_check}" in row.description.lower()):
                            year_matches_pattern = True
                            break
                    year_matches = year_matches_pattern

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–π–æ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ —Ç–µ–∫—Å—Ç–µ
            district_matches = True
            if user_filter.districts and len(user_filter.districts) > 0:
                direct_district_match = False
                districts_lower = [d.lower() for d in user_filter.districts]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ä–∞–π–æ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                for d_lower in districts_lower:
                    if (d_lower in row.description.lower() or 
                        d_lower in row.address.lower() or 
                        d_lower in row.title.lower()):
                        direct_district_match = True
                        break
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ä–∞–π–æ–Ω –æ–¥–Ω–æ–º—É –∏–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
                if not direct_district_match and district:
                    district_lower = district.lower()
                    if district_lower not in districts_lower:
                        district_matches = False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–∂–∞
            floor, total_floors = extract_floor_info(row.description)
            
            # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if floor is None:
                # –ò—â–µ–º —à–∞–±–ª–æ–Ω—ã —Ç–∏–ø–∞ "3/5 —ç—Ç–∞–∂" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                floor_pattern = r'(\d+)/(\d+)\s*—ç—Ç–∞–∂'
                floor_match = re.search(floor_pattern, row.title, re.IGNORECASE)
                if floor_match:
                    floor = int(floor_match.group(1))
                    total_floors = int(floor_match.group(2))
                
                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                if floor is None or total_floors is None:
                    combined_text = row.title + " " + row.description
                    combined_match = re.search(r'(\d+)[/-](\d+)', combined_text)
                    if combined_match:
                        floor = int(combined_match.group(1))
                        total_floors = int(combined_match.group(2))
                        
                floor_info = f"{floor}/{total_floors}" if floor and total_floors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

            floor_matches = True

            if floor is not None and total_floors is not None:
                if user_filter.not_first_floor and floor == 1:
                    floor_matches = False
                if user_filter.not_last_floor and floor == total_floors:
                    floor_matches = False
                if user_filter.min_floor is not None and floor < user_filter.min_floor:
                    floor_matches = False
                if user_filter.max_floor is not None and floor > user_filter.max_floor:
                    floor_matches = False

            # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if year_matches and district_matches and floor_matches:
                filtered_results.append(row)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if filtered_results:
            await bot.send_message(
                chat_id=user_id,
                text=f"üîî –ù–∞–π–¥–µ–Ω–æ {len(filtered_results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!"
            )

            for row in filtered_results:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≤.–º
                price_per_sqm = row.price / row.square if row.square > 0 else 0

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                year = extract_year_from_description(row.description) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                district = get_district_from_address(row.address) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                floor, total_floors = extract_floor_info(row.description) or (None, None)
                
                # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –∏–∑–≤–ª–µ—á—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è, –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫
                if floor is None:
                    # –ò—â–µ–º —à–∞–±–ª–æ–Ω—ã —Ç–∏–ø–∞ "3/5 —ç—Ç–∞–∂" –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
                    floor_pattern = r'(\d+)/(\d+)\s*—ç—Ç–∞–∂'
                    floor_match = re.search(floor_pattern, row.title, re.IGNORECASE)
                    if floor_match:
                        floor = int(floor_match.group(1))
                        total_floors = int(floor_match.group(2))
                    
                    # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ
                    if floor is None or total_floors is None:
                        combined_text = row.title + " " + row.description
                        combined_match = re.search(r'(\d+)[/-](\d+)', combined_text)
                        if combined_match:
                            floor = int(combined_match.group(1))
                            total_floors = int(combined_match.group(2))
                        
                    floor_info = f"{floor}/{total_floors}" if floor and total_floors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                message = (
                    f"üè† *{row.title or '–ö–≤–∞—Ä—Ç–∏—Ä–∞'}*\n"
                    f"üèôÔ∏è –†–∞–π–æ–Ω: {district}\n"
                    f"üè¢ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {year}\n"
                    f"üî¢ –≠—Ç–∞–∂: {floor_info}\n"
                    f"üö™ –ö–æ–º–Ω–∞—Ç: {row.room}\n"
                    f"üìè –ü–ª–æ—â–∞–¥—å: {row.square} –º¬≤\n"
                    f"üí∞ –¶–µ–Ω–∞: {row.price:,} —Ç–µ–Ω–≥–µ\n"
                    f"üìä –¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_sqm:,.0f} —Ç–µ–Ω–≥–µ\n"
                    f"üìâ –ù–∞ {100 - row.green_percentage:.1f}% –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π\n"
                    f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({row.url})"
                )

                await bot.send_message(
                    chat_id=user_id,
                    text=message,
                    parse_mode="Markdown"
                )
                
                # –û—Ç–º–µ—á–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
                sent_property = SentProperty(user_id=user.id, property_id=row.id)
                db.add(sent_property)
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑–µ
            db.commit()
        else:
            await bot.send_message(
                chat_id=user_id,
                text="–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π."
            )

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if user.notifications:
            user.notifications[0].last_sent_at = datetime.now()
            db.commit()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    finally:
        db.close()


async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º."""
    db = Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–Ω–∞–º
        avg_price = db.execute(text("""
                        SELECT AVG(p.price) as avg_price
                        FROM prices p
                        JOIN (
                            SELECT flat_id, MAX(date) as max_date
                            FROM prices
                            GROUP BY flat_id
                        ) latest ON p.flat_id = latest.flat_id AND p.date = latest.max_date
                    """)).scalar() or 0

        # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä
        avg_price_per_sqm = db.execute(text("""
                        SELECT AVG(p.price / f.square) as avg_price_per_sqm
                        FROM prices p
                        JOIN flats f ON p.flat_id = f_id
                        JOIN (
                            SELECT flat_id, MAX(date) as max_date
                            FROM prices
                            GROUP BY flat_id
                        ) latest ON p.flat_id = latest.flat_id AND p.date = latest.max_date
                        WHERE f.square > 0
                    """)).scalar() or 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º
        district_stats = {}
        properties = db.execute(text("""
                        SELECT f.address, f.square, p.price
                        FROM flats f
                        JOIN (
                            SELECT flat_id, price
                            FROM prices
                            WHERE (flat_id, date) IN (
                                SELECT flat_id, MAX(date)
                                FROM prices
                                GROUP BY flat_id
                            )
                        ) p ON f.id = p.flat_id
                    """)).fetchall()

        for property in properties:
            district = get_district_from_address(property.address)
            if district:
                if district not in district_stats:
                    district_stats[district] = {
                        'count': 0,
                        'total_price': 0,
                        'total_area': 0
                    }
                district_stats[district]['count'] += 1
                district_stats[district]['total_price'] += property.price
                district_stats[district]['total_area'] += property.square

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º*\n\n"

        message += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} —Ç–µ–Ω–≥–µ\n"
        message += f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {avg_price_per_sqm:,.0f} —Ç–µ–Ω–≥–µ\n\n"

        message += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º:*\n"
        for district, stats in district_stats.items():
            avg_district_price = stats['total_price'] / stats['count'] if stats[
                                                                              'count'] > 0 else 0
            avg_district_price_per_sqm = stats['total_price'] / stats['total_area'] if stats[
                                                                                           'total_area'] > 0 else 0

            message += (
                f"üèôÔ∏è *{district}*\n"
                f"  ‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['count']}\n"
                f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_district_price:,.0f} —Ç–µ–Ω–≥–µ\n"
                f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {avg_district_price_per_sqm:,.0f} —Ç–µ–Ω–≥–µ\n\n"
            )

        await update.message.reply_text(message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    finally:
        db.close()


# –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
scheduler = AsyncIOScheduler()


def setup_user_scheduler(user_id):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.notifications or not user.notifications[0].enabled:
            return

        notification_settings = user.notifications[0]
        app = Application.get_current()

        # –ò–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        job_id = f"notification_{user_id}"

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
        current_jobs = app.job_queue.get_jobs_by_name(job_id)
        for job in current_jobs:
            job.schedule_removal()

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notification_settings.frequency_type == "daily":
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            hour = notification_settings.hour or 10
            minute = notification_settings.minute or 0

            app.job_queue.run_daily(
                send_notification,
                time=datetime.time(hour=hour, minute=minute),
                days=(0, 1, 2, 3, 4, 5, 6),
                context={"user_id": user_id},
                name=job_id
            )
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ {hour}:{minute}")
            
        elif notification_settings.frequency_type == "hourly":
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            interval_hours = notification_settings.interval_hours or 1

            app.job_queue.run_repeating(
                send_notification,
                interval=datetime.timedelta(hours=interval_hours),
                first=0,
                context={"user_id": user_id},
                name=job_id
            )
            logger.info(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–æ –ø–æ—á–∞—Å–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º {interval_hours} —á")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        db.close()


def setup_schedulers():
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    db = Session()
    try:
        users = db.query(User).all()
        for user in users:
            setup_user_scheduler(user.telegram_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_schedulers: {e}")
    finally:
        db.close()


def restart_user_scheduler(user_id):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    setup_user_scheduler(user_id)


async def test_notification(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    user_id = update.effective_user.id
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    context.job = type('obj', (object,), {
        'context': {"user_id": user_id}
    })
    
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
    await send_notification(context)
    
    return MAIN_MENU


# –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π
async def reset_sent_properties(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = update.effective_user.id
    
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if user:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—è–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            count = db.query(SentProperty).filter(SentProperty.user_id == user.id).count()
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            db.query(SentProperty).filter(SentProperty.user_id == user.id).delete()
            db.commit()
            
            await update.message.reply_text(
                f"–ò—Å—Ç–æ—Ä–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω–∞! –£–¥–∞–ª–µ–Ω–æ {count} –∑–∞–ø–∏—Å–µ–π."
            )
        else:
            await update.message.reply_text(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    finally:
        db.close()
    
    return MAIN_MENU


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    help_text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"

        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤'\n"
        "   ‚Ä¢ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏\n"
        "   ‚Ä¢ –†–∞–π–æ–Ω—ã\n"
        "   ‚Ä¢ –≠—Ç–∞–∂–Ω–æ—Å—Ç—å\n"
        "   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç\n"
        "   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω\n"
        "   ‚Ä¢ –ü–ª–æ—â–∞–¥—å\n"
        "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã\n\n"

        "2. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ú–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã'\n"
        "   ‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "   ‚Ä¢ –°–±—Ä–æ—Å –≤—Å–µ—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "   ‚Ä¢ –°–±—Ä–æ—Å –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"

        "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'\n"
        "   ‚Ä¢ –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–ª–∏ –∫–∞–∂–¥—ã–π —á–∞—Å)\n"
        "   ‚Ä¢ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö)\n"
        "   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö)\n\n"

        "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π' –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n\n"
        
        "5. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã\n\n"

        "6. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'\n\n"

        "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
    )

    await update.message.reply_text(
        help_text,
        parse_mode="Markdown"
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return MAIN_MENU


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Exception while handling update: {context.error}")
    
    # Check if update exists and has a chat
    if update and update.effective_chat:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    else:
        # Log additional details if update is None
        if isinstance(context.error, Conflict):
            logger.error("Multiple bot instances detected. Please ensure only one instance is running.")
        else:
            logger.error(f"Error occurred outside user interaction: {context.error}")


async def on_startup(application: Application):
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    setup_schedulers()
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


async def send_notification(context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    user_id = context.job.context["user_id"]
    bot = context.bot
    
    logger.info(f"Starting notification process for user {user_id}")
    
    db = Session()
    try:
        # Get user information
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user:
            logger.info(f"User not found for user_id {user_id}")
            return
            
        if not user.filters:
            logger.info(f"No filters found for user_id {user_id}")
            return

        # Store necessary information from the user
        user_id_db = user.id
        
        # Get all filter parameters and store locally before closing the session
        if user.filters:
            user_filter = user.filters[0]
            # Copy all filter values to local variables to avoid detached object errors
            year_min = user_filter.year_min
            year_max = user_filter.year_max
            districts = list(user_filter.districts) if user_filter.districts else []
            not_first_floor = user_filter.not_first_floor
            not_last_floor = user_filter.not_last_floor
            min_floor = user_filter.min_floor
            max_floor = user_filter.max_floor
            rooms_min = user_filter.rooms_min
            rooms_max = user_filter.rooms_max
            price_min = user_filter.price_min
            price_max = user_filter.price_max
            area_min = user_filter.area_min
            area_max = user_filter.area_max
            max_market_price_percent = user_filter.max_market_price_percent
            city = user_filter.city
            address = user_filter.address
        else:
            logger.info(f"No filter found for user {user_id}")
            return
            
        # Get sent property IDs in a separate query to avoid detached object issues
        sent_property_ids = [sp.property_id for sp in db.query(SentProperty).filter(SentProperty.user_id == user_id_db).all()]
        
        # Close the initial session to avoid detached object issues
        db.close()
        logger.info(f"Initial session closed for user {user_id}")

        # –°—Ç—Ä–æ–∏–º SQL-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = """
                SELECT f.id, f.url, f.room, f.square, f.address, f.description, f.title,
                       p.price, p.green_percentage
                FROM flats f
                JOIN (
                    SELECT flat_id, price, green_percentage
                    FROM prices
                    WHERE (flat_id, date) IN (
                        SELECT flat_id, MAX(date)
                        FROM prices
                        GROUP BY flat_id
                    )
                ) p ON f.id = p.flat_id
                WHERE 1=1
                """

        params = {}

        # –ò—Å–∫–ª—é—á–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if sent_property_ids:
            query += " AND f.id NOT IN :sent_property_ids"
            params["sent_property_ids"] = tuple(sent_property_ids) if len(sent_property_ids) > 1 else f"({sent_property_ids[0]})"

        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ILIKE –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ-–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞)
        if city:
            query += " AND f.address ILIKE :city_pattern"
            params["city_pattern"] = f"%{city}%"
            
        # –§–∏–ª—å—Ç—Ä –ø–æ –∞–¥—Ä–µ—Å—É (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ILIKE –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–æ-–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ–≥–æ –ø–æ–∏—Å–∫–∞)
        if address:
            query += " AND f.address ILIKE :address_pattern"
            params["address_pattern"] = f"%{address}%"

        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        if rooms_min is not None:
            query += " AND f.room >= :rooms_min"
            params["rooms_min"] = rooms_min

        if rooms_max is not None:
            query += " AND f.room <= :rooms_max"
            params["rooms_max"] = rooms_max

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if price_min is not None:
            query += " AND p.price >= :price_min"
            params["price_min"] = price_min

        if price_max is not None:
            query += " AND p.price <= :price_max"
            params["price_max"] = price_max

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏
        if area_min is not None:
            query += " AND f.square >= :area_min"
            params["area_min"] = area_min

        if area_max is not None:
            query += " AND f.square <= :area_max"
            params["area_max"] = area_max

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
        if max_market_price_percent is not None and max_market_price_percent > 0:
            query += " AND p.green_percentage >= :market_percent"
            params["market_percent"] = max_market_price_percent

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã (–æ—Ç –±–æ–ª—å—à–µ–≥–æ –∫ –º–µ–Ω—å—à–µ–º—É)
        query += " ORDER BY p.green_percentage DESC LIMIT 10"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–≤–µ–∂–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            db_query = Session()
            try:
                logger.info(f"Executing main query for user {user_id}")
                result = db_query.execute(text(query), params).fetchall()
                db_query.commit()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —É—Å–ø–µ—à–Ω–æ
                logger.info(f"Query returned {len(result)} results for user {user_id}")
            except Exception as e:
                db_query.rollback()  # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ø—Ä–∏ –æ—à–∏–±–∫–µ
                logger.error(f"SQL error in main query for user {user_id}: {e}")
                
                # –ü—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
                try:
                    logger.info(f"Trying fallback query for user {user_id}")
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –±–∞–∑–æ–≤—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
                    basic_query = """
                        SELECT f.id, f.url, f.room, f.square, f.address, f.description, f.title,
                               p.price, p.green_percentage
                        FROM flats f
                        JOIN (
                            SELECT flat_id, price, green_percentage
                            FROM prices
                            WHERE (flat_id, date) IN (
                                SELECT flat_id, MAX(date)
                                FROM prices
                                GROUP BY flat_id
                            )
                        ) p ON f.id = p.flat_id
                        WHERE 1=1
                    """
                    
                    basic_params = {}
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º, —Ü–µ–Ω–µ –∏ –ø–ª–æ—â–∞–¥–∏
                    if rooms_min is not None:
                        basic_query += " AND f.room >= :rooms_min"
                        basic_params["rooms_min"] = rooms_min
                    
                    if rooms_max is not None:
                        basic_query += " AND f.room <= :rooms_max"
                        basic_params["rooms_max"] = rooms_max
                    
                    if price_min is not None:
                        basic_query += " AND p.price >= :price_min"
                        basic_params["price_min"] = price_min
                    
                    if price_max is not None:
                        basic_query += " AND p.price <= :price_max"
                        basic_params["price_max"] = price_max
                    
                    basic_query += " ORDER BY p.green_percentage DESC LIMIT 10"
                    
                    result = db_query.execute(text(basic_query), basic_params).fetchall()
                    db_query.commit()
                    logger.info(f"Fallback query returned {len(result)} results for user {user_id}")
                except Exception as e2:
                    db_query.rollback()
                    logger.error(f"SQL error in fallback query for user {user_id}: {e2}")
                    result = []
            finally:
                db_query.close()
                logger.info(f"Query session closed for user {user_id}")
                
            # –ü–æ–ª—É—á–∏–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, —Ç–µ–ø–µ—Ä—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö
            filtered_results = []
            for row in result:
                property_id = row[0]
                url = row[1]
                room = row[2]
                square = row[3]
                address = row[4]
                description = row[5] or ''
                title = row[6] or ''
                price = row[7]
                green_percentage = row[8]
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
                if property_id in sent_property_ids:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å–ª–æ–≤–∏—è–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                extracted_year = extract_year_from_description(description)
                district = get_district_from_address(address)
                floor, total_floors = extract_floor_info(description)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
                year_filter_passed = True
                # –ï—Å–ª–∏ –≥–æ–¥ –∏–∑–≤–ª–µ—á–µ–Ω –∏ —Ñ–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                if extracted_year is not None:
                    if year_min is not None and extracted_year < year_min:
                        year_filter_passed = False
                    if year_max is not None and extracted_year > year_max:
                        year_filter_passed = False
                # –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω, –Ω–æ —Ñ–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
                elif year_min is not None or year_max is not None:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —è–≤–Ω–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –≥–æ–¥–∞
                    if " –≥.–ø." in description.lower() or "–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏" in description.lower() or "–ø–æ—Å—Ç—Ä–æ–µ–Ω –≤" in description.lower():
                        # –ï—Å–ª–∏ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≥–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ª—é–±–æ–º—É –≥–æ–¥—É –∏–∑ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                        year_range_start = year_min or 1900
                        year_range_end = year_max or 2025
                        year_mentions_found = False
                        
                        for check_year in range(year_range_start, year_range_end + 1):
                            year_patterns = [
                                f"{check_year} –≥.–ø.", 
                                f"{check_year}–≥.–ø", 
                                f"{check_year} –≥–æ–¥", 
                                f"{check_year} –≥–æ–¥–∞", 
                                f"–ø–æ—Å—Ç—Ä–æ–µ–Ω –≤ {check_year}"
                            ]
                            if any(pattern in description.lower() for pattern in year_patterns):
                                year_mentions_found = True
                                break
                                
                        # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≥–æ–¥–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–∏–ª—å—Ç—Ä—É
                        if not year_mentions_found:
                            year_filter_passed = False
                
                if not year_filter_passed:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–π–æ–Ω–∞
                district_filter_passed = True
                if districts and len(districts) > 0:
                    # –ï—Å–ª–∏ —Ä–∞–π–æ–Ω –∏–∑–≤–ª–µ—á–µ–Ω - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                    if district is not None:
                        # Case-insensitive comparison
                        district_lower = district.lower()
                        districts_lower = [d.lower() for d in districts]
                        if district_lower not in districts_lower:
                            # –†–∞–π–æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
                            district_mentioned = False
                            for d in districts:
                                d_lower = d.lower()
                                if (d_lower in description.lower() or 
                                    d_lower in address.lower() or 
                                    d_lower in title.lower()):
                                    district_mentioned = True
                                    break
                            if not district_mentioned:
                                district_filter_passed = False
                    else:
                        # –ï—Å–ª–∏ —Ä–∞–π–æ–Ω –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
                        district_mentioned = False
                        for d in districts:
                            d_lower = d.lower()
                            if (d_lower in description.lower() or 
                                d_lower in address.lower() or 
                                d_lower in title.lower()):
                                district_mentioned = True
                                break
                        
                        # –ï—Å–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Ä–∞–π–æ–Ω–∞ –Ω–µ—Ç, –Ω–æ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Å–ª–æ–≤–æ "—Ä–∞–π–æ–Ω", 
                        # —ç—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å, —á—Ç–æ —Ä–∞–π–æ–Ω —É–∫–∞–∑–∞–Ω –Ω–µ –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                        if not district_mentioned:
                            if "—Ä–∞–π–æ–Ω" in description.lower() or "—Ä–∞–π–æ–Ω" in address.lower():
                                district_filter_passed = False
                
                if not district_filter_passed:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–∂–∞
                floor_filter_passed = True
                if floor is not None and total_floors is not None:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂
                    if not_first_floor and floor == 1:
                        floor_filter_passed = False
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂
                    if not_last_floor and floor == total_floors:
                        floor_filter_passed = False
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞
                    if min_floor is not None and floor < min_floor:
                        floor_filter_passed = False
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞
                    if max_floor is not None and floor > max_floor:
                        floor_filter_passed = False
                else:
                    # –ï—Å–ª–∏ —ç—Ç–∞–∂ –Ω–µ –∏–∑–≤–ª–µ—á–µ–Ω, –Ω–æ —Ñ–∏–ª—å—Ç—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç
                    has_floor_filters = (not_first_floor or 
                                        not_last_floor or 
                                        min_floor is not None or 
                                        max_floor is not None)
                    
                    if has_floor_filters:
                        # –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —ç—Ç–∞–∂–µ–π –≤ —Ç–µ–∫—Å—Ç–µ
                        floor_match = re.search(r'(\d+)/(\d+)', title + " " + description)
                        if floor_match:
                            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω —ç—Ç–∞–∂–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
                            try:
                                extracted_floor = int(floor_match.group(1))
                                extracted_total = int(floor_match.group(2))
                                
                                if not_first_floor and extracted_floor == 1:
                                    floor_filter_passed = False
                                if not_last_floor and extracted_floor == extracted_total:
                                    floor_filter_passed = False
                                if min_floor is not None and extracted_floor < min_floor:
                                    floor_filter_passed = False
                                if max_floor is not None and extracted_floor > max_floor:
                                    floor_filter_passed = False
                            except:
                                pass
                        else:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ/–ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —ç—Ç–∞–∂–∞
                            if not_first_floor:
                                if "–ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂" in description.lower() or "1 —ç—Ç–∞–∂" in description.lower() or "1-–π —ç—Ç–∞–∂" in description.lower():
                                    floor_filter_passed = False
                            if not_last_floor:
                                if "–ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂" in description.lower() or "–≤–µ—Ä—Ö–Ω–∏–π —ç—Ç–∞–∂" in description.lower():
                                    floor_filter_passed = False
                
                if not floor_filter_passed:
                    continue
                
                # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã
                filtered_results.append({
                    'id': property_id,
                    'url': url,
                    'room': room,
                    'square': square,
                    'address': address,
                    'description': description,
                    'title': title,
                    'price': price,
                    'green_percentage': green_percentage
                })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if filtered_results:
                logger.info(f"Found {len(filtered_results)} filtered results for user {user_id}")
                await bot.send_message(
                    chat_id=user_id,
                    text=f"üîî –ù–∞–π–¥–µ–Ω–æ {len(filtered_results)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!"
                )
                
                sent_count = 0
                
                for property_data in filtered_results:
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
                    property_year = extract_year_from_description(property_data['description']) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    property_district = get_district_from_address(property_data['address']) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —ç—Ç–∞–∂ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                    property_floor, property_total_floors = extract_floor_info(property_data['description']) or (None, None)
                    
                    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
                    if property_floor is None or property_total_floors is None:
                        title_floor_match = re.search(r'(\d+)/(\d+)\s*—ç—Ç–∞–∂', property_data['title'], re.IGNORECASE)
                        if title_floor_match:
                            property_floor = int(title_floor_match.group(1))
                            property_total_floors = int(title_floor_match.group(2))
                    
                    # –ü—Ä–æ–±—É–µ–º –ø–æ–∏—Å–∫–∞—Ç—å –≤ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–º —Ç–µ–∫—Å—Ç–µ (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –æ–ø–∏—Å–∞–Ω–∏–µ)
                    if property_floor is None or property_total_floors is None:
                        combined_text = property_data['title'] + " " + property_data['description']
                        combined_match = re.search(r'(\d+)[/-](\d+)', combined_text)
                        if combined_match:
                            property_floor = int(combined_match.group(1))
                            property_total_floors = int(combined_match.group(2))
                    
                    floor_info = f"{property_floor}/{property_total_floors}" if property_floor and property_total_floors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    
                    message = (
                        f"üè† *{property_data['title'] or '–ö–≤–∞—Ä—Ç–∏—Ä–∞'}*\n"
                        f"üèôÔ∏è –†–∞–π–æ–Ω: {property_district}\n"
                        f"üè¢ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {property_year}\n"
                        f"üî¢ –≠—Ç–∞–∂: {floor_info}\n"
                        f"üö™ –ö–æ–º–Ω–∞—Ç: {property_data['room']}\n"
                        f"üìè –ü–ª–æ—â–∞–¥—å: {property_data['square']} –º¬≤\n"
                        f"üí∞ –¶–µ–Ω–∞: {property_data['price']:,} —Ç–µ–Ω–≥–µ\n"
                        f"üìä –¶–µ–Ω–∞ –∑–∞ –º¬≤: {int(property_data['price'] / property_data['square']) if property_data['square'] else 0:,} —Ç–µ–Ω–≥–µ/–º¬≤\n"
                        f"üìâ –û—Ç —Ä—ã–Ω–æ—á–Ω–æ–π: {property_data['green_percentage']:.1f}%\n\n"
                        f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({property_data['url']})"
                    )
                    
                    try:
                        await bot.send_message(
                            chat_id=user_id,
                            text=message,
                            parse_mode="Markdown",
                            disable_web_page_preview=True
                        )
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–∏
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏
                        db_update = Session()
                        try:
                            new_sent_property = SentProperty(
                                user_id=user_id_db,  # Using the ID we stored earlier
                                property_id=property_data['id']
                            )
                            db_update.add(new_sent_property)
                            db_update.commit()
                            sent_count += 1
                        except Exception as e:
                            db_update.rollback()
                            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
                        finally:
                            db_update.close()
                            
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                db_notification = Session()
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                    notification = db_notification.query(NotificationSetting).filter(NotificationSetting.user_id == user_id_db).first()
                    if notification:
                        notification.last_sent_at = datetime.now()
                        db_notification.commit()
                except Exception as e:
                    db_notification.rollback()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                finally:
                    db_notification.close()
                
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            else:
                logger.info(f"No matching properties found for user {user_id}")
                try:
                    await bot.send_message(
                        chat_id=user_id,
                        text="–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º."
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        
        except Exception as e:
            logger.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {user_id}: {e}", exc_info=True)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è {user_id}: {e}", exc_info=True)
    finally:
        if 'db' in locals() and db:
            try:
                db.close()
                logger.info(f"Final database connection closed for user {user_id}")
            except:
                pass


async def handle_districts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    text = update.message.text
    
    # Split the input by commas and clean up spaces - make lowercase for case-insensitive comparison
    districts = [district.strip() for district in text.split(',') if district.strip()]
    
    if not districts:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–π–æ–Ω:"
        )
        return DISTRICTS
    
    # Update in database
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        if user and user.filters:
            user.filters[0].districts = districts
            db.commit()
            
            await update.message.reply_text(
                f"–†–∞–π–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {', '.join(districts)}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_filter_menu_keyboard()
            )
            return FILTER_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–æ–≤: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return DISTRICTS
    finally:
        db.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
async def show_current_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Ö —Å–±—Ä–æ—Å–∏—Ç—å."""
    user_id = update.effective_user.id
    
    logger.info(f"Showing current filters for user {user_id}")
    
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.filters:
            await update.message.reply_text(
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤'."
            )
            return MAIN_MENU
        
        user_filter = user.filters[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ç–µ–∫—É—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
        message = "üîç *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:*\n\n"
        
        # –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        if user_filter.year_min is not None or user_filter.year_max is not None:
            year_min = user_filter.year_min or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            year_max = user_filter.year_max or "–Ω–µ —É–∫–∞–∑–∞–Ω"
            message += f"üè¢ *–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:* {year_min} - {year_max}\n"
        else:
            message += "üè¢ *–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏:* –Ω–µ —É–∫–∞–∑–∞–Ω\n"
        
        # –†–∞–π–æ–Ω—ã
        if user_filter.districts and len(user_filter.districts) > 0:
            message += f"üèôÔ∏è *–†–∞–π–æ–Ω—ã:* {', '.join(user_filter.districts)}\n"
        else:
            message += "üèôÔ∏è *–†–∞–π–æ–Ω—ã:* –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        # –ì–æ—Ä–æ–¥
        if user_filter.city:
            message += f"üåÉ *–ì–æ—Ä–æ–¥:* {user_filter.city}\n"
        else:
            message += "üåÉ *–ì–æ—Ä–æ–¥:* –Ω–µ —É–∫–∞–∑–∞–Ω\n"
            
        # –ê–¥—Ä–µ—Å
        if user_filter.address:
            message += f"üìç *–ê–¥—Ä–µ—Å:* {user_filter.address}\n"
        else:
            message += "üìç *–ê–¥—Ä–µ—Å:* –Ω–µ —É–∫–∞–∑–∞–Ω\n"
        
        # –≠—Ç–∞–∂–∏
        floor_filters = []
        if user_filter.not_first_floor:
            floor_filters.append("–Ω–µ –ø–µ—Ä–≤—ã–π")
        if user_filter.not_last_floor:
            floor_filters.append("–Ω–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π")
        if user_filter.min_floor is not None:
            floor_filters.append(f"–æ—Ç {user_filter.min_floor}")
        if user_filter.max_floor is not None:
            floor_filters.append(f"–¥–æ {user_filter.max_floor}")
        
        if floor_filters:
            message += f"üî¢ *–≠—Ç–∞–∂–∏:* {', '.join(floor_filters)}\n"
        else:
            message += "üî¢ *–≠—Ç–∞–∂–∏:* –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        # –ö–æ–º–Ω–∞—Ç—ã
        if user_filter.rooms_min is not None or user_filter.rooms_max is not None:
            if user_filter.rooms_min == user_filter.rooms_max:
                message += f"üö™ *–ö–æ–º–Ω–∞—Ç—ã:* {user_filter.rooms_min}\n"
            else:
                rooms_min = user_filter.rooms_min or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                rooms_max = user_filter.rooms_max or "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
                message += f"üö™ *–ö–æ–º–Ω–∞—Ç—ã:* {rooms_min} - {rooms_max}\n"
        else:
            message += "üö™ *–ö–æ–º–Ω–∞—Ç—ã:* –Ω–µ —É–∫–∞–∑–∞–Ω—ã\n"
        
        # –¶–µ–Ω–∞
        if user_filter.price_min is not None or user_filter.price_max is not None:
            price_min = f"{user_filter.price_min:,}" if user_filter.price_min else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            price_max = f"{user_filter.price_max:,}" if user_filter.price_max else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            message += f"üí∞ *–¶–µ–Ω–∞:* {price_min} - {price_max} —Ç–µ–Ω–≥–µ\n"
        else:
            message += "üí∞ *–¶–µ–Ω–∞:* –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n"
        
        # –ü–ª–æ—â–∞–¥—å
        if user_filter.area_min is not None or user_filter.area_max is not None:
            area_min = user_filter.area_min or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            area_max = user_filter.area_max or "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
            message += f"üìè *–ü–ª–æ—â–∞–¥—å:* {area_min} - {area_max} –º¬≤\n"
        else:
            message += "üìè *–ü–ª–æ—â–∞–¥—å:* –Ω–µ —É–∫–∞–∑–∞–Ω–∞\n"
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
        if user_filter.max_market_price_percent is not None:
            message += f"üìâ *–û—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã:* –¥–æ {user_filter.max_market_price_percent}%\n"
        else:
            message += "üìâ *–û—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã:* –Ω–µ —É–∫–∞–∑–∞–Ω\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        keyboard = [
            [InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="reset_all_filters")],
            [InlineKeyboardButton("üè¢ –°–±—Ä–æ—Å–∏—Ç—å –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", callback_data="reset_filter_year")],
            [InlineKeyboardButton("üèôÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —Ä–∞–π–æ–Ω—ã", callback_data="reset_filter_districts")],
            [InlineKeyboardButton("üåÉ –°–±—Ä–æ—Å–∏—Ç—å –≥–æ—Ä–æ–¥", callback_data="reset_filter_city")],
            [InlineKeyboardButton("üìç –°–±—Ä–æ—Å–∏—Ç—å –∞–¥—Ä–µ—Å", callback_data="reset_filter_address")],
            [InlineKeyboardButton("üî¢ –°–±—Ä–æ—Å–∏—Ç—å —ç—Ç–∞–∂–∏", callback_data="reset_filter_floors")],
            [InlineKeyboardButton("üö™ –°–±—Ä–æ—Å–∏—Ç—å –∫–æ–º–Ω–∞—Ç—ã", callback_data="reset_filter_rooms")],
            [InlineKeyboardButton("üí∞ –°–±—Ä–æ—Å–∏—Ç—å —Ü–µ–Ω—É", callback_data="reset_filter_price")],
            [InlineKeyboardButton("üìè –°–±—Ä–æ—Å–∏—Ç—å –ø–ª–æ—â–∞–¥—å", callback_data="reset_filter_area")],
            [InlineKeyboardButton("üìâ –°–±—Ä–æ—Å–∏—Ç—å % –æ—Ç —Ä—ã–Ω–∫–∞", callback_data="reset_filter_market")]
        ]
        
        sent_message = await update.message.reply_text(
            message,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
        
        logger.info(f"Displayed filter information and reset buttons for user {user_id}")
        
        # State transition to RESET_FILTERS
        return RESET_FILTERS
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–∞—à–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return MAIN_MENU
    finally:
        db.close()


async def handle_reset_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    data = query.data
    
    logger.info(f"Reset filter request: {data} for user {user_id}")
    
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.filters:
            await query.edit_message_text(
                "–£ –≤–∞—Å –µ—â–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ñ–∏–ª—å—Ç—Ä—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤'."
            )
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard()
            )
            return MAIN_MENU
        
        user_filter = user.filters[0]
        
        if data == "reset_all_filters":
            # Log before update
            logger.info(f"Before reset - Year: {user_filter.year_min}-{user_filter.year_max}, Districts: {user_filter.districts}")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            user_filter.year_min = None
            user_filter.year_max = None
            user_filter.districts = []
            user_filter.not_first_floor = False
            user_filter.not_last_floor = False
            user_filter.min_floor = None
            user_filter.max_floor = None
            user_filter.rooms_min = None
            user_filter.rooms_max = None
            user_filter.price_min = None
            user_filter.price_max = None
            user_filter.area_min = None
            user_filter.area_max = None
            user_filter.max_market_price_percent = 0.0
            user_filter.city = None
            user_filter.address = None
            
            # Log after update but before commit
            logger.info(f"After reset, before commit - Year: {user_filter.year_min}-{user_filter.year_max}, Districts: {user_filter.districts}")
            
            db.commit()
            
            # Log after commit
            logger.info("Reset all filters - Commit successful")
            
            # Verify the changes were saved
            db.refresh(user_filter)
            logger.info(f"After commit and refresh - Year: {user_filter.year_min}-{user_filter.year_max}, Districts: {user_filter.districts}")
            
            await query.edit_message_text(
                "–í—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!"
            )
        elif data == "reset_filter_year":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            logger.info(f"Before reset - Year: {user_filter.year_min}-{user_filter.year_max}")
            user_filter.year_min = None
            user_filter.year_max = None
            db.commit()
            logger.info("Reset year filter - Commit successful")
            
            # Verify
            db.refresh(user_filter)
            logger.info(f"After commit - Year: {user_filter.year_min}-{user_filter.year_max}")
            
            await query.edit_message_text(
                "–§–∏–ª—å—Ç—Ä –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ª—é–±—ã–º –≥–æ–¥–æ–º –ø–æ—Å—Ç—Ä–æ–π–∫–∏."
            )
        elif data == "reset_filter_districts":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ä–∞–π–æ–Ω–æ–≤
            logger.info(f"Before reset - Districts: {user_filter.districts}")
            user_filter.districts = []
            db.commit()
            logger.info("Reset districts filter - Commit successful")
            
            # Verify
            db.refresh(user_filter)
            logger.info(f"After commit - Districts: {user_filter.districts}")
            
            await query.edit_message_text(
                "–§–∏–ª—å—Ç—Ä —Ä–∞–π–æ–Ω–æ–≤ —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö —Ä–∞–π–æ–Ω–æ–≤."
            )
        elif data == "reset_filter_city":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –≥–æ—Ä–æ–¥–∞
            logger.info(f"Before reset - City: {user_filter.city}")
            user_filter.city = None
            db.commit()
            logger.info("Reset city filter - Commit successful")
            
            # Verify
            db.refresh(user_filter)
            logger.info(f"After commit - City: {user_filter.city}")
            
            await query.edit_message_text(
                "–§–∏–ª—å—Ç—Ä –≥–æ—Ä–æ–¥–∞ —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –≥–æ—Ä–æ–¥–æ–≤."
            )
        elif data == "reset_filter_address":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∞–¥—Ä–µ—Å–∞
            logger.info(f"Before reset - Address: {user_filter.address}")
            user_filter.address = None
            db.commit()
            logger.info("Reset address filter - Commit successful")
            
            # Verify
            db.refresh(user_filter)
            logger.info(f"After commit - Address: {user_filter.address}")
            
            await query.edit_message_text(
                "–§–∏–ª—å—Ç—Ä –∞–¥—Ä–µ—Å–∞ —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ª—é–±—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏."
            )
        elif data == "reset_filter_floors":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —ç—Ç–∞–∂–µ–π
            logger.info(f"Before reset - Floors: min={user_filter.min_floor}, max={user_filter.max_floor}, not_first={user_filter.not_first_floor}, not_last={user_filter.not_last_floor}")
            user_filter.not_first_floor = False
            user_filter.not_last_floor = False
            user_filter.min_floor = None
            user_filter.max_floor = None
            db.commit()
            logger.info("Reset floors filter - Commit successful")
            
            await query.edit_message_text(
                "–§–∏–ª—å—Ç—Ä —ç—Ç–∞–∂–µ–π —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ª—é–±—ã–º —ç—Ç–∞–∂–æ–º."
            )
        elif data == "reset_filter_rooms":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ–º–Ω–∞—Ç
            logger.info(f"Before reset - Rooms: min={user_filter.rooms_min}, max={user_filter.rooms_max}")
            user_filter.rooms_min = None
            user_filter.rooms_max = None
            db.commit()
            logger.info("Reset rooms filter - Commit successful")
            
            await query.edit_message_text(
                "–§–∏–ª—å—Ç—Ä –∫–æ–º–Ω–∞—Ç —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ª—é–±—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–Ω–∞—Ç."
            )
        elif data == "reset_filter_price":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã
            logger.info(f"Before reset - Price: min={user_filter.price_min}, max={user_filter.price_max}")
            user_filter.price_min = None
            user_filter.price_max = None
            db.commit()
            logger.info("Reset price filter - Commit successful")
            
            await query.edit_message_text(
                "–§–∏–ª—å—Ç—Ä —Ü–µ–Ω—ã —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ª—é–±–æ–π —Ü–µ–Ω–æ–π."
            )
        elif data == "reset_filter_area":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–ª–æ—â–∞–¥–∏
            logger.info(f"Before reset - Area: min={user_filter.area_min}, max={user_filter.area_max}")
            user_filter.area_min = None
            user_filter.area_max = None
            db.commit()
            logger.info("Reset area filter - Commit successful")
            
            await query.edit_message_text(
                "–§–∏–ª—å—Ç—Ä –ø–ª–æ—â–∞–¥–∏ —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ª—é–±–æ–π –ø–ª–æ—â–∞–¥—å—é."
            )
        elif data == "reset_filter_market":
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
            logger.info(f"Before reset - Market percent: {user_filter.max_market_price_percent}")
            user_filter.max_market_price_percent = 0.0
            db.commit()
            logger.info("Reset market percent filter - Commit successful")
            
            await query.edit_message_text(
                "–§–∏–ª—å—Ç—Ä –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã —Å–±—Ä–æ—à–µ–Ω. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –æ–±—ä—è–≤–ª–µ–Ω–∏—è —Å –ª—é–±—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º."
            )
        else:
            logger.warning(f"Unknown filter reset command: {data}")
            await query.edit_message_text(
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∏–ª—å—Ç—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_main_keyboard()
            )
            return MAIN_MENU
        
        # –ü–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        try:
            restart_user_scheduler(user_id)
            logger.info(f"Restarted scheduler for user {user_id}")
        except Exception as e:
            logger.error(f"Error restarting scheduler: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        
        logger.info(f"Filter reset completed successfully for {data}, user {user_id}")
        return MAIN_MENU
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}", exc_info=True)
        await query.edit_message_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return MAIN_MENU
    finally:
        if 'db' in locals() and db:
            db.close()
            logger.info("Database connection closed")


async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≥–æ—Ä–æ–¥–∞."""
    city = update.message.text.strip()
    
    if not city:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
        )
        return CITY
    
    # Update in database
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        if user and user.filters:
            user.filters[0].city = city
            db.commit()
            
            await update.message.reply_text(
                f"–ì–æ—Ä–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {city}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_filter_menu_keyboard()
            )
            return FILTER_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return CITY
    finally:
        db.close()


async def handle_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞."""
    address = update.message.text.strip()
    
    if not address:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞:"
        )
        return ADDRESS
    
    # Update in database
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        if user and user.filters:
            user.filters[0].address = address
            db.commit()
            
            await update.message.reply_text(
                f"–ß–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {address}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_filter_menu_keyboard()
            )
            return FILTER_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        return ADDRESS
    finally:
        db.close()


async def admin_overall_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_TELEGRAM_ID:
        logger.warning(f"Non-admin user {user_id} tried to access admin_overall_statistics")
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_keyboard(is_admin=False)
        )
        return MAIN_MENU
    
    db = Session()
    try:
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = db.query(User).count()
        active_users = db.query(User).join(NotificationSetting).filter(NotificationSetting.enabled == True).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º
        filters_count = db.query(UserFilter).count()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º
        total_sent = db.query(SentProperty).count()
        
        # –ù–∞–∏–±–æ–ª–µ–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã
        district_counts = {}
        user_filters = db.query(UserFilter).all()
        for uf in user_filters:
            if uf.districts:
                for district in uf.districts:
                    district_counts[district] = district_counts.get(district, 0) + 1
        
        popular_districts = sorted(district_counts.items(), key=lambda x: x[1], reverse=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ–¥–∞–º –ø–æ—Å—Ç—Ä–æ–π–∫–∏
        year_min_avg = db.query(func.avg(UserFilter.year_min)).filter(UserFilter.year_min != None).scalar() or 0
        year_max_avg = db.query(func.avg(UserFilter.year_max)).filter(UserFilter.year_max != None).scalar() or 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ü–µ–Ω–∞–º
        price_min_avg = db.query(func.avg(UserFilter.price_min)).filter(UserFilter.price_min != None).scalar() or 0
        price_max_avg = db.query(func.avg(UserFilter.price_max)).filter(UserFilter.price_max != None).scalar() or 0
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = "üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        message += f"üë• *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n"
        message += f"  ‚Ä¢ –í—Å–µ–≥–æ: {total_users}\n"
        message += f"  ‚Ä¢ –° –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏: {active_users}\n\n"
        
        message += f"üîç *–§–∏–ª—å—Ç—Ä—ã:*\n"
        message += f"  ‚Ä¢ –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ: {filters_count}\n"
        message += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –≥–æ–¥–æ–≤: {int(year_min_avg)} - {int(year_max_avg)}\n"
        message += f"  ‚Ä¢ –°—Ä–µ–¥–Ω–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω: {int(price_min_avg):,} - {int(price_max_avg):,} —Ç–µ–Ω–≥–µ\n\n"
        
        message += f"üì¨ *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è:*\n"
        message += f"  ‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}\n\n"
        
        message += f"üèôÔ∏è *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ä–∞–π–æ–Ω—ã:*\n"
        for district, count in popular_districts[:5]:
            message += f"  ‚Ä¢ {district}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        
        await update.message.reply_text(
            message,
            parse_mode="Markdown",
            reply_markup=get_main_keyboard(is_admin=True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_admin=True)
        )
    finally:
        db.close()


async def handle_admin_broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id != ADMIN_TELEGRAM_ID:
        logger.warning(f"Non-admin user {user_id} tried to access handle_admin_broadcast")
        await update.message.reply_text(
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=get_main_keyboard(is_admin=False)
        )
        return MAIN_MENU
    
    message_text = update.message.text
    if not message_text or message_text.strip() == "":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏.",
            reply_markup=get_main_keyboard(is_admin=True)
        )
        return ADMIN_BROADCAST
    
    # –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
    await update.message.reply_text(
        "–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º..."
    )
    
    db = Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = db.query(User).all()
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=f"üì¢ *–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:*\n\n{message_text}",
                    parse_mode="Markdown"
                )
                sent_count += 1
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.telegram_id}: {e}")
                failed_count += 1
        
        await update.message.reply_text(
            f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å {failed_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            reply_markup=get_main_keyboard(is_admin=True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_keyboard(is_admin=True)
        )
    finally:
        db.close()
    
    return MAIN_MENU


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º lock-—Ñ–∞–π–ª –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
    lock_file = "/tmp/krisha_tg_bot.lock"
    
    try:
        # Try to create a lock file with exclusive access
        lock_fd = os.open(lock_file, os.O_CREAT | os.O_EXCL | os.O_WRONLY)
        
        # Write PID to lock file
        os.write(lock_fd, str(os.getpid()).encode())
        os.close(lock_fd)
        
        # Register cleanup to remove lock on exit
        import atexit
        atexit.register(lambda: os.unlink(lock_file) if os.path.exists(lock_file) else None)
        
        logger.info("Bot starting with lock file created")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        Base.metadata.create_all(bind=engine)

        # Configure the application
        application = Application.builder() \
            .token(TOKEN) \
            .post_init(on_startup) \
            .build()

        # Create a separate handler for reset filter callbacks
        reset_filter_handler = CallbackQueryHandler(handle_reset_filters, pattern='^(reset_all_filters|reset_filter_year|reset_filter_districts|reset_filter_city|reset_filter_address|reset_filter_floors|reset_filter_rooms|reset_filter_price|reset_filter_area|reset_filter_market)')
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–Ω —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start)],
            states={
                MAIN_MENU: [
                    CallbackQueryHandler(handle_main_menu),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
                ],
                FILTER_MENU: [
                    CallbackQueryHandler(handle_filter_menu)
                ],
                YEAR_MIN: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_year_min)
                ],
                YEAR_MAX: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_year_max)
                ],
                DISTRICTS: [
                    CallbackQueryHandler(handle_filter_menu),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_districts)
                ],
                FLOOR_SETTINGS: [
                    CallbackQueryHandler(handle_filter_menu)
                ],
                MIN_FLOOR: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_min_floor)
                ],
                MAX_FLOOR: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_max_floor)
                ],
                ROOMS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_rooms)
                ],
                PRICE_RANGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price_range)
                ],
                AREA_RANGE: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_area_range)
                ],
                MARKET_PERCENT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_market_percent)
                ],
                CITY: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_city)
                ],
                ADDRESS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_address)
                ],
                NOTIFICATION_MENU: [
                    CallbackQueryHandler(handle_notification_menu)
                ],
                NOTIFICATION_TYPE: [
                    CallbackQueryHandler(handle_notification_menu)
                ],
                NOTIFICATION_TIME: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_notification_time)
                ],
                NOTIFICATION_INTERVAL: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_notification_interval)
                ],
                RESET_FILTERS: [
                    reset_filter_handler,
                ],
                ADMIN_BROADCAST: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_broadcast)
                ]
            },
            fallbacks=[CommandHandler("cancel", cancel)],
            per_message=False,  # Changed to False to allow mixed handler types
            name="main_conversation"
        )

        application.add_error_handler(error_handler)
        application.add_handler(reset_filter_handler)  # Add the handler outside the conversation too
        application.add_handler(conv_handler)
        
        # Add direct command handlers for essential commands
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("reset", reset_sent_properties))
        
        # Add a general message handler with lower priority to catch any text messages outside conversation
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu), group=1)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        setup_schedulers()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –ø—Ä–æ—Å—Ç—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        logger.info("Starting bot polling")
        application.run_polling(drop_pending_updates=True)
        
    except OSError as e:
        import errno, sys
        if e.errno == errno.EEXIST:
            logger.error("Another instance of the bot is already running. Exiting.")
            try:
                # Try to read PID from existing lock file
                with open(lock_file, 'r') as f:
                    pid = f.read().strip()
                    logger.error(f"Bot is already running with PID: {pid}")
                    
                # Check if process is actually running
                try:
                    os.kill(int(pid), 0)  # Signal 0 doesn't kill but checks if process exists
                except (OSError, ValueError):
                    logger.warning("Stale lock file detected. The previous instance may have crashed.")
                    # You can choose to remove stale lock and retry
                    logger.info("Removing stale lock file...")
                    os.unlink(lock_file)
                    logger.info("Please restart the bot.")
            except (IOError, ValueError) as read_error:
                logger.error(f"Error reading lock file: {read_error}")
            
            sys.exit(1)
        else:
            # Other OS errors
            logger.error(f"OS error: {e}")
            sys.exit(1)


if __name__ == "__main__":
    main()
