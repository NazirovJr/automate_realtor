import logging
from datetime import datetime
import re

from sqlalchemy import create_engine, Column, Integer, String, Float, Boolean, DateTime, ForeignKey, JSON
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker, relationship, scoped_session
from sqlalchemy.sql import text
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.interval import IntervalTrigger
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, \
    ConversationHandler

from telegram.error import TelegramError

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TOKEN = "7866153858:AAFMpL-XejNmlJdkgc9D6ExC1H6hkQeBPvY"
DATABASE_URL = "postgresql://postgres:postgres@localhost/krisha"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
Base = declarative_base()
engine = create_engine(DATABASE_URL)
session_factory = sessionmaker(bind=engine)
Session = scoped_session(session_factory)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
class User(Base):
    __tablename__ = "telegram_users"

    id = Column(Integer, primary_key=True)
    telegram_id = Column(Integer, unique=True, index=True)
    username = Column(String, nullable=True)
    first_name = Column(String)
    last_name = Column(String, nullable=True)
    created_at = Column(DateTime, default=datetime.now)

    filters = relationship("UserFilter", back_populates="user", cascade="all, delete-orphan")
    notifications = relationship("NotificationSetting", back_populates="user", cascade="all, delete-orphan")


class UserFilter(Base):
    __tablename__ = "user_filters"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("telegram_users.id"))
    year_min = Column(Integer, default=1977)
    year_max = Column(Integer, default=2000)
    districts = Column(JSON, default=["–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π", "–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π", "–ú–µ–¥–µ—É—Å–∫–∏–π", "–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π"])
    not_first_floor = Column(Boolean, default=True)
    not_last_floor = Column(Boolean, default=True)
    min_floor = Column(Integer, nullable=True)
    max_floor = Column(Integer, nullable=True)
    rooms_min = Column(Integer, nullable=True)
    rooms_max = Column(Integer, nullable=True)
    price_min = Column(Integer, nullable=True)
    price_max = Column(Integer, nullable=True)
    area_min = Column(Integer, nullable=True)
    area_max = Column(Integer, nullable=True)
    max_market_price_percent = Column(Float, default=100.0)

    user = relationship("User", back_populates="filters")


class NotificationSetting(Base):
    __tablename__ = "notification_settings"

    id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey("telegram_users.id"))
    frequency_type = Column(String, default="daily")  # daily, hourly, custom
    hour = Column(Integer, default=10)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - 10 —É—Ç—Ä–∞
    minute = Column(Integer, default=0)
    interval_hours = Column(Integer, default=1)  # –î–ª—è hourly —Ä–µ–∂–∏–º–∞
    enabled = Column(Boolean, default=True)
    last_sent_at = Column(DateTime, nullable=True)

    user = relationship("User", back_populates="notifications")


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
Base.metadata.create_all(bind=engine)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    MAIN_MENU,
    FILTER_MENU,
    YEAR_MIN,
    YEAR_MAX,
    DISTRICTS,
    FLOOR_SETTINGS,
    MIN_FLOOR,
    MAX_FLOOR,
    ROOMS,
    PRICE_RANGE,
    AREA_RANGE,
    MARKET_PERCENT,
    NOTIFICATION_MENU,
    NOTIFICATION_TYPE,
    NOTIFICATION_TIME,
    NOTIFICATION_INTERVAL
) = range(16)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    keyboard = [
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤")],
        [KeyboardButton("üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")],
        [KeyboardButton("üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_filter_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üè¢ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏", callback_data="filter_year")],
        [InlineKeyboardButton("üèôÔ∏è –†–∞–π–æ–Ω—ã", callback_data="filter_districts")],
        [InlineKeyboardButton("üî¢ –≠—Ç–∞–∂–∏", callback_data="filter_floors")],
        [InlineKeyboardButton("üö™ –ö–æ–º–Ω–∞—Ç—ã", callback_data="filter_rooms")],
        [InlineKeyboardButton("üí∞ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω", callback_data="filter_price")],
        [InlineKeyboardButton("üìè –ü–ª–æ—â–∞–¥—å", callback_data="filter_area")],
        [InlineKeyboardButton("üìâ % –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã", callback_data="filter_market_percent")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏", callback_data="save_filters")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_notification_menu_keyboard():
    keyboard = [
        [InlineKeyboardButton("üïí –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notif_type")],
        [InlineKeyboardButton("‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notif_time")],
        [InlineKeyboardButton("‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª (–¥–ª—è hourly)", callback_data="notif_interval")],
        [InlineKeyboardButton("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –≤—ã–π—Ç–∏", callback_data="save_notifications")]
    ]
    return InlineKeyboardMarkup(keyboard)


def get_notification_type_keyboard():
    keyboard = [
        [InlineKeyboardButton("üìÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", callback_data="type_daily")],
        [InlineKeyboardButton("üïê –ö–∞–∂–¥—ã–π —á–∞—Å", callback_data="type_hourly")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_notif_menu")]
    ]
    return InlineKeyboardMarkup(keyboard)


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def extract_year_from_description(description):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è."""
    if not description:
        return None

    year_patterns = [
        r'–≥–æ–¥\s+–ø–æ—Å—Ç—Ä–æ–π–∫–∏[:\s]+(\d{4})',
        r'–ø–æ—Å—Ç—Ä–æ–µ–Ω[–∞]?\s+–≤\s+(\d{4})',
        r'(\d{4})\s+–≥–æ–¥[–∞]?\s+–ø–æ—Å—Ç—Ä–æ–π–∫–∏',
        r'–¥–æ–º\s+(\d{4})\s+–≥–æ–¥[–∞]?'
    ]

    for pattern in year_patterns:
        match = re.search(pattern, description.lower())
        if match:
            year = int(match.group(1))
            if 1900 <= year <= 2023:
                return year

    return None


def extract_floor_info(description):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–∞–∂–µ –∏ –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —ç—Ç–∞–∂–µ–π –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è."""
    if not description:
        return None, None

    floor_pattern = r'(\d+)(?:\s*[-\/–∏–∑]\s*|\s+—ç—Ç–∞–∂\s+–∏–∑\s+)(\d+)'
    match = re.search(floor_pattern, description.lower())

    if match:
        return int(match.group(1)), int(match.group(2))

    return None, None


def get_district_from_address(address):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ä–∞–π–æ–Ω –ø–æ –∞–¥—Ä–µ—Å—É."""
    if not address:
        return None

    districts = {
        "–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π": ["–∞–ª–º–∞–ª–∏–Ω—Å–∫", "–∞–ª–º–∞—Ç—ã", "–∞–±–∞—è", "–¥–æ—Å—Ç—ã–∫", "–∂–∏–±–µ–∫ –∂–æ–ª—ã"],
        "–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π": ["–±–æ—Å—Ç–∞–Ω–¥—ã–∫", "—Ç–∏–º–∏—Ä—è–∑–µ–≤", "—Ä–æ–∑—ã–±–∞–∫–∏–µ–≤", "–∞–ª—å-—Ñ–∞—Ä–∞–±–∏"],
        "–ú–µ–¥–µ—É—Å–∫–∏–π": ["–º–µ–¥–µ—É", "–∫–æ–∫-—Ç–æ–±–µ", "–¥–æ—Å—Ç—ã–∫", "–≥–æ—Ä–Ω—ã–π"],
        "–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π": ["–∂–µ—Ç—ã—Å—É", "–∫—É–ª—å–¥–∂–∏–Ω—Å–∫", "–ø–∞–ª–ª–∞–¥–∏—É–º"]
    }

    address_lower = address.lower()

    for district, keywords in districts.items():
        for keyword in keywords:
            if keyword in address_lower:
                return district

    return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start."""
    user = update.effective_user

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
    db = Session()
    try:
        db_user = db.query(User).filter(User.telegram_id == user.id).first()
        if not db_user:
            db_user = User(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name
            )
            db.add(db_user)

            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_filter = UserFilter(user=db_user)
            db.add(default_filter)

            # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            default_notification = NotificationSetting(user=db_user)
            db.add(default_notification)

            db.commit()

        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. "
            "–ù–∞—Å—Ç—Ä–æ–π —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–¥ —Å–≤–æ–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –∏ —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–µ–±—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.",
            reply_markup=get_main_keyboard()
        )
        return MAIN_MENU
    finally:
        db.close()


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    text = update.message.text
    if text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    elif text == "üîî –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await update.message.reply_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_menu_keyboard()
        )
        return NOTIFICATION_MENU
    elif text == "üîç –ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π":
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π
        await search_properties(update, context)
        return MAIN_MENU
    elif text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await show_statistics(update, context)
        return MAIN_MENU
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–º–æ—â—å
        await update.message.reply_text(
            "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –≤—ã–≥–æ–¥–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.\n\n"
            "–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:\n"
            "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã (–≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏, —Ä–∞–π–æ–Ω, —ç—Ç–∞–∂–Ω–æ—Å—Ç—å, —Ü–µ–Ω–∞ –∏ —Ç.–¥.)\n"
            "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–ª–∏ –∫–∞–∂–¥—ã–π —á–∞—Å)\n"
            "3. –ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        return MAIN_MENU


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤
async def handle_filter_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤."""
    query = update.callback_query
    await query.answer()

    print("sdjkasdlksad;asdks;aldkas;ldsa;dlasd;lskd;lsadka;ldsd;lkasd;askd;alsdsa;ldsa")
    data = query.data

    if data == "filter_year":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1977):"
        )
        return YEAR_MIN
    elif data == "filter_districts":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            user_filter = user.filters[0] if user and user.filters else None

            current_districts = user_filter.districts if user_filter else ["–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π", "–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π", "–ú–µ–¥–µ—É—Å–∫–∏–π",
                                                                           "–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π"]

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —Ä–∞–π–æ–Ω–æ–≤
            districts = ["–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π", "–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π", "–ú–µ–¥–µ—É—Å–∫–∏–π", "–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π"]
            keyboard = []

            for district in districts:
                status = "‚úÖ" if district in current_districts else "‚ùå"
                keyboard.append([InlineKeyboardButton(f"{status} {district}", callback_data=f"district_{district}")])

            keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="districts_done")])

            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return DISTRICTS
        finally:
            db.close()
    elif data == "filter_floors":
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏:\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂", callback_data="toggle_not_first")],
                [InlineKeyboardButton("–ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂", callback_data="toggle_not_last")],
                [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —ç—Ç–∞–∂–µ–π", callback_data="set_floor_range")],
                [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="floors_done")]
            ])
        )
        return FLOOR_SETTINGS
    elif data == "filter_rooms":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1-3 –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç 1 –¥–æ 3 –∫–æ–º–Ω–∞—Ç):"
        )
        return ROOMS
    elif data == "filter_price":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å –≤ –º–∏–ª–ª–∏–æ–Ω–∞—Ö —Ç–µ–Ω–≥–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15-30 –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç 15 –¥–æ 30 –º–ª–Ω):"
        )
        return PRICE_RANGE
    elif data == "filter_area":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–∏ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 40-80):"
        )
        return AREA_RANGE
    elif data == "filter_market_percent":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, 90 –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–µ—à–µ–≤–ª–µ –Ω–∞ 10% –æ—Ç —Ä—ã–Ω–∫–∞):"
        )
        return MARKET_PERCENT
    elif data == "save_filters":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return MAIN_MENU
    elif data.startswith("district_"):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–∞–π–æ–Ω–∞
        district = data.replace("district_", "")

        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            user_filter = user.filters[0] if user and user.filters else None

            if user_filter:
                current_districts = user_filter.districts or []

                if district in current_districts:
                    current_districts.remove(district)
                else:
                    current_districts.append(district)

                user_filter.districts = current_districts
                db.commit()

            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            districts = ["–ê–ª–º–∞–ª–∏–Ω—Å–∫–∏–π", "–ë–æ—Å—Ç–∞–Ω–¥—ã–∫—Å–∫–∏–π", "–ú–µ–¥–µ—É—Å–∫–∏–π", "–ñ–µ—Ç—ã—Å—É—Å–∫–∏–π"]
            keyboard = []

            for d in districts:
                status = "‚úÖ" if d in current_districts else "‚ùå"
                keyboard.append([InlineKeyboardButton(f"{status} {d}", callback_data=f"district_{d}")])

            keyboard.append([InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="districts_done")])

            await query.edit_message_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
            return DISTRICTS
        finally:
            db.close()
    elif data == "districts_done":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    elif data.startswith("toggle_"):
        option = data.replace("toggle_", "")

        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            user_filter = user.filters[0] if user and user.filters else None

            if user_filter:
                if option == "not_first":
                    user_filter.not_first_floor = not user_filter.not_first_floor
                elif option == "not_last":
                    user_filter.not_last_floor = not user_filter.not_last_floor

                db.commit()

            not_first = user_filter.not_first_floor if user_filter else True
            not_last = user_filter.not_last_floor if user_filter else True

            await query.edit_message_text(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏:\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏–∏:",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton(f"{'‚úÖ' if not_first else '‚ùå'} –ù–µ –ø–µ—Ä–≤—ã–π —ç—Ç–∞–∂",
                                          callback_data="toggle_not_first")],
                    [InlineKeyboardButton(f"{'‚úÖ' if not_last else '‚ùå'} –ù–µ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç—Ç–∞–∂",
                                          callback_data="toggle_not_last")],
                    [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω —ç—Ç–∞–∂–µ–π", callback_data="set_floor_range")],
                    [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="floors_done")]
                ])
            )
            return FLOOR_SETTINGS
        finally:
            db.close()
    elif data == "set_floor_range":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):"
        )
        return MIN_FLOOR
    elif data == "floors_done":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU


async def handle_year_min(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏."""
    try:
        year = int(update.message.text)
        if 1900 <= year <= 2025:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            context.user_data["year_min"] = year

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].year_min = year
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2000):"
            )
            return YEAR_MAX
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç 1900 –¥–æ 2025:"
            )
            return YEAR_MIN
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:"
        )
        return YEAR_MIN


async def handle_year_max(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏."""
    try:
        year = int(update.message.text)
        year_min = context.user_data.get("year_min", 1977)

        if 1900 <= year <= 2025 and year >= year_min:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].year_max = year
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_filter_menu_keyboard()  # –î–æ–±–∞–≤—å—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            )
            return FILTER_MENU  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —Ñ–∏–ª—å—Ç—Ä–æ–≤
        else:
            await update.message.reply_text(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –æ—Ç {year_min} –¥–æ 2023:"
            )
            return YEAR_MAX
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞:"
        )
        return YEAR_MAX


async def handle_min_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞."""
    try:
        floor = int(update.message.text)
        if floor >= 0:
            context.user_data["min_floor"] = floor

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].min_floor = floor if floor > 0 else None
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —ç—Ç–∞–∂ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):"
            )
            return MAX_FLOOR
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –∏ –≤—ã—à–µ:"
            )
            return MIN_FLOOR
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:"
        )
        return MIN_FLOOR


async def handle_max_floor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —ç—Ç–∞–∂–∞."""
    try:
        floor = int(update.message.text)
        min_floor = context.user_data.get("min_floor", 0)

        if floor >= 0 and (floor >= min_floor or floor == 0):
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].max_floor = floor if floor > 0 else None
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç—Ç–∞–∂–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_filter_menu_keyboard()
            )
            return FILTER_MENU
        else:
            await update.message.reply_text(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç {min_floor} –∏ –≤—ã—à–µ (–∏–ª–∏ 0, –µ—Å–ª–∏ –Ω–µ –≤–∞–∂–Ω–æ):"
            )
            return MAX_FLOOR
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:"
        )
        return MAX_FLOOR


async def handle_rooms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç."""
    text = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1-3")
    range_pattern = r'^(\d+)[-‚Äì](\d+)$'
    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2")
    single_pattern = r'^(\d+)$'

    range_match = re.match(range_pattern, text)
    single_match = re.match(single_pattern, text)

    if range_match:
        min_rooms = int(range_match.group(1))
        max_rooms = int(range_match.group(2))

        if min_rooms > max_rooms:
            min_rooms, max_rooms = max_rooms, min_rooms

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.filters:
                user.filters[0].rooms_min = min_rooms
                user.filters[0].rooms_max = max_rooms
                db.commit()
        finally:
            db.close()

        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç: –æ—Ç {min_rooms} –¥–æ {max_rooms}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    elif single_match:
        rooms = int(single_match.group(1))

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.filters:
                user.filters[0].rooms_min = rooms
                user.filters[0].rooms_max = rooms
                db.commit()
        finally:
            db.close()

        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–Ω–∞—Ç: —Ä–æ–≤–Ω–æ {rooms}. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, '2' –∏–ª–∏ '1-3'):"
        )
        return ROOMS


async def handle_price_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω."""
    text = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "15-30")
    range_pattern = r'^(\d+(?:\.\d+)?)[-‚Äì](\d+(?:\.\d+)?)$'
    match = re.match(range_pattern, text)

    if match:
        min_price = float(match.group(1))
        max_price = float(match.group(2))

        if min_price > max_price:
            min_price, max_price = max_price, min_price

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.filters:
                user.filters[0].price_min = int(min_price)
                user.filters[0].price_max = int(max_price)
                db.commit()
        finally:
            db.close()

        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ü–µ–Ω: –æ—Ç {int(min_price)} –¥–æ {int(max_price)} –º–ª–Ω —Ç–µ–Ω–≥–µ. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, '15000000-3000000'):"
        )
        return PRICE_RANGE


async def handle_area_range(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–ª–æ—â–∞–¥–∏."""
    text = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "40-80")
    range_pattern = r'^(\d+(?:\.\d+)?)[-‚Äì](\d+(?:\.\d+)?)$'
    match = re.match(range_pattern, text)

    if match:
        min_area = float(match.group(1))
        max_area = float(match.group(2))

        if min_area > max_area:
            min_area, max_area = max_area, min_area

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.filters:
                user.filters[0].area_min = int(min_area)
                user.filters[0].area_max = int(max_area)
                db.commit()
        finally:
            db.close()

        await update.message.reply_text(
            f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–ª–æ—â–∞–¥–∏: –æ—Ç {int(min_area)} –¥–æ {int(max_area)} –∫–≤.–º. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_filter_menu_keyboard()
        )
        return FILTER_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–ª–æ—â–∞–¥–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '40-80'):"
        )
        return AREA_RANGE


async def handle_market_percent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã."""
    try:
        percent = float(update.message.text)
        if 0 < percent <= 100:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.filters:
                    user.filters[0].max_market_price_percent = percent
                    db.commit()
            finally:
                db.close()

            await update.message.reply_text(
                f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã: {percent}%. –í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
                reply_markup=get_filter_menu_keyboard()
            )
            return FILTER_MENU
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 1 –¥–æ 100:"
            )
            return MARKET_PERCENT
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:"
        )
        return MARKET_PERCENT


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def handle_notification_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≤ –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    query = update.callback_query
    await query.answer()

    data = query.data

    if data == "notif_type":
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_type_keyboard()
        )
        return NOTIFICATION_TYPE
    elif data == "notif_time":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00):"
        )
        return NOTIFICATION_TIME
    elif data == "notif_interval":
        await query.edit_message_text(
            "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ —á–∞—Å–∞—Ö –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1 –¥–ª—è –∫–∞–∂–¥—ã–π —á–∞—Å, 2 –¥–ª—è –∫–∞–∂–¥—ã–µ –¥–≤–∞ —á–∞—Å–∞):"
        )
        return NOTIFICATION_INTERVAL
    elif data == "save_notifications":
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
        )
        await query.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_main_keyboard()
        )
        return MAIN_MENU
    elif data == "back_to_notif_menu":
        await query.edit_message_text(
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_menu_keyboard()
        )
        return NOTIFICATION_MENU
    elif data.startswith("type_"):
        notification_type = data.replace("type_", "")

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.notifications:
                user.notifications[0].frequency_type = notification_type
                db.commit()

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                restart_user_scheduler(user.telegram_id)
        finally:
            db.close()

        await query.edit_message_text(
            f"–¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {notification_type}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_menu_keyboard()
        )
        return NOTIFICATION_MENU


async def handle_notification_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    text = update.message.text

    # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "10:00")
    time_pattern = r'^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$'
    match = re.match(time_pattern, text)

    if match:
        hour = int(match.group(1))
        minute = int(match.group(2))

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db = Session()
        try:
            user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
            if user and user.notifications:
                user.notifications[0].hour = hour
                user.notifications[0].minute = minute
                db.commit()

                # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                restart_user_scheduler(user.telegram_id)
        finally:
            db.close()

        await update.message.reply_text(
            f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {hour:02d}:{minute:02d}. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
            reply_markup=get_notification_menu_keyboard()
        )
        return NOTIFICATION_MENU
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10:00):"
        )
        return NOTIFICATION_TIME


async def handle_notification_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    try:
        interval = int(update.message.text)
        if 1 <= interval <= 24:
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            db = Session()
            try:
                user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
                if user and user.notifications:
                    user.notifications[0].interval_hours = interval
                    db.commit()

                    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    restart_user_scheduler(user.telegram_id)
            finally:
                db.close()

            await update.message.reply_text(
                f"–ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –∫–∞–∂–¥—ã–µ {interval} —á. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
                reply_markup=get_notification_menu_keyboard()
            )
            return NOTIFICATION_MENU
        else:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ—Ç 1 –¥–æ 24 —á–∞—Å–æ–≤:"
            )
            return NOTIFICATION_INTERVAL
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:"
        )
        return NOTIFICATION_INTERVAL


async def search_properties(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –ø–æ —Ñ–∏–ª—å—Ç—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == update.effective_user.id).first()
        if not user or not user.filters:
            await update.message.reply_text(
                "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞."
            )
            return

        user_filter = user.filters[0]

        # –°—Ç—Ä–æ–∏–º SQL-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        query = """
                SELECT f.id, f.url, f.room, f.square, f.address, f.description, f.title,
                       p.price, p.green_percentage
                FROM flats f
                JOIN (
                    SELECT flat_id, price, green_percentage
                    FROM prices
                    WHERE (flat_id, date) IN (
                        SELECT flat_id, MAX(date) 
                        FROM prices 
                        GROUP BY flat_id
                    )
                ) p ON f.id = p.flat_id
                WHERE 1=1
                """

        params = {}

        # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É –ø–æ—Å—Ç—Ä–æ–π–∫–∏ (–∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è)
        if user_filter.year_min is not None or user_filter.year_max is not None:
            # –≠—Ç–æ —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π SQL-–∑–∞–ø—Ä–æ—Å, –ø–æ—ç—Ç–æ–º—É –º—ã –±—É–¥–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Python
            pass

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ä–∞–π–æ–Ω—É (–ø–æ –∞–¥—Ä–µ—Å—É)
        if user_filter.districts and len(user_filter.districts) > 0:
            # –¢–∞–∫–∂–µ —Å–ª–æ–∂–Ω–æ —á–µ—Ä–µ–∑ SQL, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ Python
            pass

        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        if user_filter.rooms_min is not None:
            query += " AND f.room >= :rooms_min"
            params["rooms_min"] = user_filter.rooms_min

        if user_filter.rooms_max is not None:
            query += " AND f.room <= :rooms_max"
            params["rooms_max"] = user_filter.rooms_max

        # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
        if user_filter.price_min is not None:
            query += " AND p.price >= :price_min"
            params["price_min"] = user_filter.price_min

        if user_filter.price_max is not None:
            query += " AND p.price <= :price_max"
            params["price_max"] = user_filter.price_max

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏
        if user_filter.area_min is not None:
            query += " AND f.square >= :area_min"
            params["area_min"] = user_filter.area_min

        if user_filter.area_max is not None:
            query += " AND f.square <= :area_max"
            params["area_max"] = user_filter.area_max

        # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
        if user_filter.max_market_price_percent is not None:
            query += " AND p.green_percentage <= :market_percent"
            params["market_percent"] = user_filter.max_market_price_percent

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
        query += " ORDER BY p.green_percentage ASC LIMIT 10"

        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = db.execute(text(query), params).fetchall()

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥—É –∏ —Ä–∞–π–æ–Ω—É –≤ Python
        filtered_results = []
        for row in result:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            year = extract_year_from_description(row.description)
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–π–æ–Ω –ø–æ –∞–¥—Ä–µ—Å—É
            district = get_district_from_address(row.address)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
            year_matches = True
            if year is not None and user_filter.year_min is not None and year < user_filter.year_min:
                year_matches = False
            if year is not None and user_filter.year_max is not None and year > user_filter.year_max:
                year_matches = False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–π–æ–Ω–∞
            district_matches = True
            if district is not None and user_filter.districts and len(user_filter.districts) > 0:
                if district not in user_filter.districts:
                    district_matches = False

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–∂–∞
            floor, total_floors = extract_floor_info(row.description)
            floor_matches = True

            if floor is not None and total_floors is not None:
                if user_filter.not_first_floor and floor == 1:
                    floor_matches = False
                if user_filter.not_last_floor and floor == total_floors:
                    floor_matches = False
                if user_filter.min_floor is not None and floor < user_filter.min_floor:
                    floor_matches = False
                if user_filter.max_floor is not None and floor > user_filter.max_floor:
                    floor_matches = False

            # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            if year_matches and district_matches and floor_matches:
                filtered_results.append(row)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if filtered_results:
            await update.message.reply_text(
                f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_results)} –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º:"
            )

            for row in filtered_results:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≤.–º
                price_per_sqm = row.price / row.square if row.square > 0 else 0

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                year = extract_year_from_description(row.description) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                district = get_district_from_address(row.address) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                floor, total_floors = extract_floor_info(row.description) or (None, None)
                floor_info = f"{floor}/{total_floors}" if floor and total_floors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                message = (
                    f"üè† *{row.title or '–ö–≤–∞—Ä—Ç–∏—Ä–∞'}*\n"
                    f"üèôÔ∏è –†–∞–π–æ–Ω: {district}\n"
                    f"üè¢ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {year}\n"
                    f"üî¢ –≠—Ç–∞–∂: {floor_info}\n"
                    f"üö™ –ö–æ–º–Ω–∞—Ç: {row.room}\n"
                    f"üìè –ü–ª–æ—â–∞–¥—å: {row.square} –º¬≤\n"
                    f"üí∞ –¶–µ–Ω–∞: {row.price:,} —Ç–µ–Ω–≥–µ\n"
                    f"üìä –¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_sqm:,.0f} —Ç–µ–Ω–≥–µ\n"
                    f"üìâ –ù–∞ {100 - row.green_percentage:.1f}% –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π\n"
                    f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({row.url})"
                )

                await update.message.reply_text(message, parse_mode="Markdown")
            else:
                await update.message.reply_text(
                    "–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã."
                )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    finally:
        db.close()


async def show_statistics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º."""
    db = Session()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ü–µ–Ω–∞–º
        avg_price = db.execute(text("""
                        SELECT AVG(p.price) as avg_price
                        FROM prices p
                        JOIN (
                            SELECT flat_id, MAX(date) as max_date
                            FROM prices
                            GROUP BY flat_id
                        ) latest ON p.flat_id = latest.flat_id AND p.date = latest.max_date
                    """)).scalar() or 0

        # –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä
        avg_price_per_sqm = db.execute(text("""
                        SELECT AVG(p.price / f.square) as avg_price_per_sqm
                        FROM prices p
                        JOIN flats f ON p.flat_id = f_id
                        JOIN (
                            SELECT flat_id, MAX(date) as max_date
                            FROM prices
                            GROUP BY flat_id
                        ) latest ON p.flat_id = latest.flat_id AND p.date = latest.max_date
                        WHERE f.square > 0
                    """)).scalar() or 0

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º
        district_stats = {}
        properties = db.execute(text("""
                        SELECT f.address, f.square, p.price
                        FROM flats f
                        JOIN (
                            SELECT flat_id, price
                            FROM prices
                            WHERE (flat_id, date) IN (
                                SELECT flat_id, MAX(date)
                                FROM prices
                                GROUP BY flat_id
                            )
                        ) p ON f.id = p.flat_id
                    """)).fetchall()

        for property in properties:
            district = get_district_from_address(property.address)
            if district:
                if district not in district_stats:
                    district_stats[district] = {
                        'count': 0,
                        'total_price': 0,
                        'total_area': 0
                    }
                district_stats[district]['count'] += 1
                district_stats[district]['total_price'] += property.price
                district_stats[district]['total_area'] += property.square

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        message = "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º*\n\n"

        message += f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_price:,.0f} —Ç–µ–Ω–≥–µ\n"
        message += f"üìä –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {avg_price_per_sqm:,.0f} —Ç–µ–Ω–≥–µ\n\n"

        message += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞–π–æ–Ω–∞–º:*\n"
        for district, stats in district_stats.items():
            avg_district_price = stats['total_price'] / stats['count'] if stats[
                                                                              'count'] > 0 else 0
            avg_district_price_per_sqm = stats['total_price'] / stats['total_area'] if stats[
                                                                                           'total_area'] > 0 else 0

            message += (
                f"üèôÔ∏è *{district}*\n"
                f"  ‚Ä¢ –û–±—ä—è–≤–ª–µ–Ω–∏–π: {stats['count']}\n"
                f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞: {avg_district_price:,.0f} —Ç–µ–Ω–≥–µ\n"
                f"  ‚Ä¢ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ –º¬≤: {avg_district_price_per_sqm:,.0f} —Ç–µ–Ω–≥–µ\n\n"
            )

        await update.message.reply_text(message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
        )
    finally:
        db.close()


# –°–∏—Å—Ç–µ–º–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
scheduler = AsyncIOScheduler()


def setup_user_scheduler(user_id, bot):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.notifications or not user.notifications[0].enabled:
            return

        notification_settings = user.notifications[0]
        job_queue = Application.get_current().job_queue

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
        current_jobs = job_queue.get_jobs_by_name(f"notification_{user_id}")
        for job in current_jobs:
            job.schedule_removal()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        if notification_settings.frequency_type == "daily":
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            job_queue.run_daily(
                send_notification,
                time=datetime.time(hour=notification_settings.hour, minute=notification_settings.minute),
                days=(0, 1, 2, 3, 4, 5, 6),
                context={"user_id": user_id, "bot": bot},
                name=f"notification_{user_id}"
            )
        elif notification_settings.frequency_type == "hourly":
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            job_queue.run_repeating(
                send_notification,
                interval=datetime.timedelta(hours=notification_settings.interval_hours),
                first=0,
                context={"user_id": user_id, "bot": bot},
                name=f"notification_{user_id}"
            )

        logger.info(f"Scheduled notifications for user {user_id} - {notification_settings.frequency_type}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_user_scheduler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    finally:
        db.close()


async def send_notification(user_id, bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.filters:
            return

        user_filter = user.filters[0]

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        last_notification = None
        if user.notifications and user.notifications[0].last_sent_at:
            last_notification = user.notifications[0].last_sent_at

        # –°—Ç—Ä–æ–∏–º SQL-–∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        query = """
                    SELECT f.id, f.url, f.room, f.square, f.address, f.description, f.title,
                           p.price, p.green_percentage
                    FROM flats f
                    JOIN (
                        SELECT flat_id, price, green_percentage
                        FROM prices
                        WHERE (flat_id, date) IN (
                            SELECT flat_id, MAX(date)
                            FROM prices
                            GROUP BY flat_id
                        )
                    ) p ON f.id = p.flat_id
                    WHERE 1=1
                    """

        params = {}

        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        if last_notification:
            query += " AND f.created_at > :last_notification"
            params["last_notification"] = last_notification

        # –§–∏–ª—å—Ç—Ä –ø–æ –∫–æ–º–Ω–∞—Ç–∞–º
        if user_filter.rooms_min is not None:
            query += " AND f.room >= :rooms_min"
            params["rooms_min"] = user_filter.rooms_min

            if user_filter.rooms_max is not None:
                query += " AND f.room <= :rooms_max"
                params["rooms_max"] = user_filter.rooms_max

            # –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–Ω–µ
            if user_filter.price_min is not None:
                query += " AND p.price >= :price_min"
                params["price_min"] = user_filter.price_min

            if user_filter.price_max is not None:
                query += " AND p.price <= :price_max"
                params["price_max"] = user_filter.price_max

            # –§–∏–ª—å—Ç—Ä –ø–æ –ø–ª–æ—â–∞–¥–∏
            if user_filter.area_min is not None:
                query += " AND f.square >= :area_min"
                params["area_min"] = user_filter.area_min

            if user_filter.area_max is not None:
                query += " AND f.square <= :area_max"
                params["area_max"] = user_filter.area_max

            # –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã
            if user_filter.max_market_price_percent is not None:
                query += " AND p.green_percentage <= :market_percent"
                params["market_percent"] = user_filter.max_market_price_percent

            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç—É –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã (–æ—Ç –º–µ–Ω—å—à–µ–≥–æ –∫ –±–æ–ª—å—à–µ–º—É)
            query += " ORDER BY p.green_percentage ASC LIMIT 10"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            result = db.execute(text(query), params).fetchall()
            print("result" + str(result))
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥–æ–¥—É –∏ —Ä–∞–π–æ–Ω—É –≤ Python
            filtered_results = []
            for row in result:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
                year = extract_year_from_description(row.description)
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–π–æ–Ω –ø–æ –∞–¥—Ä–µ—Å—É
                district = get_district_from_address(row.address)

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ–¥–∞ –ø–æ—Å—Ç—Ä–æ–π–∫–∏
                year_matches = True
                if year is not None and user_filter.year_min is not None and year < user_filter.year_min:
                    year_matches = False
                if year is not None and user_filter.year_max is not None and year > user_filter.year_max:
                    year_matches = False

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–π–æ–Ω–∞
                district_matches = True
                if district is not None and user_filter.districts and len(
                        user_filter.districts) > 0:
                    if district not in user_filter.districts:
                        district_matches = False

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —ç—Ç–∞–∂–∞
                floor, total_floors = extract_floor_info(row.description)
                floor_matches = True

                if floor is not None and total_floors is not None:
                    if user_filter.not_first_floor and floor == 1:
                        floor_matches = False
                    if user_filter.not_last_floor and floor == total_floors:
                        floor_matches = False
                    if user_filter.min_floor is not None and floor < user_filter.min_floor:
                        floor_matches = False
                    if user_filter.max_floor is not None and floor > user_filter.max_floor:
                        floor_matches = False

                # –ï—Å–ª–∏ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                if year_matches and district_matches and floor_matches:
                    filtered_results.append(row)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if filtered_results:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"üîî –ù–∞–π–¥–µ–Ω–æ {len(filtered_results)} –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!"
                )

                for row in filtered_results:
                    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –∫–≤.–º
                    price_per_sqm = row.price / row.square if row.square > 0 else 0

                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    year = extract_year_from_description(row.description) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    district = get_district_from_address(row.address) or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    floor, total_floors = extract_floor_info(row.description) or (None, None)
                    floor_info = f"{floor}/{total_floors}" if floor and total_floors else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                    message = (
                        f"üè† *{row.title or '–ö–≤–∞—Ä—Ç–∏—Ä–∞'}*\n"
                        f"üèôÔ∏è –†–∞–π–æ–Ω: {district}\n"
                        f"üè¢ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏: {year}\n"
                        f"üî¢ –≠—Ç–∞–∂: {floor_info}\n"
                        f"üö™ –ö–æ–º–Ω–∞—Ç: {row.room}\n"
                        f"üìè –ü–ª–æ—â–∞–¥—å: {row.square} –º¬≤\n"
                        f"üí∞ –¶–µ–Ω–∞: {row.price:,} —Ç–µ–Ω–≥–µ\n"
                        f"üìä –¶–µ–Ω–∞ –∑–∞ –º¬≤: {price_per_sqm:,.0f} —Ç–µ–Ω–≥–µ\n"
                        f"üìâ –ù–∞ {100 - row.green_percentage:.1f}% –Ω–∏–∂–µ —Ä—ã–Ω–æ—á–Ω–æ–π\n"
                        f"üîó [–ü–æ–¥—Ä–æ–±–Ω–µ–µ]({row.url})"
                    )

                    await bot.send_message(
                        chat_id=user_id,
                        text=message,
                        parse_mode="Markdown"
                    )

            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if user.notifications:
                user.notifications[0].last_sent_at = datetime.now()
                db.commit()


    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    finally:
        db.close()


def setup_schedulers(bot):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    db = Session()
    try:
        users = db.query(User).all()
        for user in users:
            setup_user_scheduler(user.telegram_id, bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ setup_schedulers: {e}")
    finally:
        db.close()

def setup_user_scheduler(user_id, bot):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    db = Session()
    try:
        user = db.query(User).filter(User.telegram_id == user_id).first()
        if not user or not user.notifications or not user.notifications[0].enabled:
            return

        notification_settings = user.notifications[0]

        # –ò–º—è –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        job_id = f"notification_{user_id}"

        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –µ—Å—Ç—å
        if scheduler.get_job(job_id):
            scheduler.remove_job(job_id)

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        if notification_settings.frequency_type == "daily":
            # –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            hour = notification_settings.hour or 10
            minute = notification_settings.minute or 0

            scheduler.add_job(
                send_notification,
                CronTrigger(hour=hour, minute=minute),
                args=[user_id, bot],
                id=job_id,
                replace_existing=True
            )
        elif notification_settings.frequency_type == "hourly":
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
            interval_hours = notification_settings.interval_hours or 1

            scheduler.add_job(
                send_notification,
                IntervalTrigger(hours=interval_hours),
                args=[user_id, bot],
                id=job_id,
                replace_existing=True
            )
    finally:
        db.close()


def restart_user_scheduler(user_id):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫."""
    if not scheduler.running:
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    bot = Application.get_current().bot

    # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    setup_user_scheduler(user_id, bot)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º."""
    help_text = (
        "ü§ñ *–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É –ø–æ–∏—Å–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*\n\n"
        "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"

        "*–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:*\n"
        "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤'\n"
        "   ‚Ä¢ –ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏\n"
        "   ‚Ä¢ –†–∞–π–æ–Ω—ã\n"
        "   ‚Ä¢ –≠—Ç–∞–∂–Ω–æ—Å—Ç—å\n"
        "   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç\n"
        "   ‚Ä¢ –î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω\n"
        "   ‚Ä¢ –ü–ª–æ—â–∞–¥—å\n"
        "   ‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç —Ä—ã–Ω–æ—á–Ω–æ–π —Ü–µ–Ω—ã\n\n"

        "2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –º–µ–Ω—é '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'\n"
        "   ‚Ä¢ –¢–∏–ø —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏–ª–∏ –∫–∞–∂–¥—ã–π —á–∞—Å)\n"
        "   ‚Ä¢ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö)\n"
        "   ‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö)\n\n"

        "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ü–æ–∏—Å–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π' –¥–ª—è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n\n"

        "4. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ –º–µ–Ω—é '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'\n\n"

        "–ë–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."
    )

    await update.message.reply_text(
        help_text,
        parse_mode="Markdown"
    )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )
    return MAIN_MENU


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(msg="Exception while handling update:", exc_info=context.error)

    if isinstance(context.error, TelegramError):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )


async def on_startup(application: Application):
    # Start the scheduler
    scheduler.start()

    # Setup user schedulers after application starts
    setup_schedulers(application.bot)

def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    Base.metadata.create_all(bind=engine)

    application = Application.builder() \
        .token(TOKEN) \
        .post_init(on_startup) \
        .build()


    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Å–µ–π—à–Ω —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                CallbackQueryHandler(handle_main_menu),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)
            ],
            FILTER_MENU: [
                CallbackQueryHandler(handle_filter_menu)
            ],
            YEAR_MIN: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_year_min)
            ],
            YEAR_MAX: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_year_max)
            ],
            DISTRICTS: [
                CallbackQueryHandler(handle_filter_menu)
            ],
            FLOOR_SETTINGS: [
                CallbackQueryHandler(handle_filter_menu)
            ],
            MIN_FLOOR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_min_floor)
            ],
            MAX_FLOOR: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_max_floor)
            ],
            ROOMS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_rooms)
            ],
            PRICE_RANGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_price_range)
            ],
            AREA_RANGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_area_range)
            ],
            MARKET_PERCENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_market_percent)
            ],
            NOTIFICATION_MENU: [
                CallbackQueryHandler(handle_notification_menu)
            ],
            NOTIFICATION_TYPE: [
                CallbackQueryHandler(handle_notification_menu)
            ],
            NOTIFICATION_TIME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_notification_time)
            ],
            NOTIFICATION_INTERVAL: [
                MessageHandler(filters.TEXT & ~filters.COMMAND,
                               handle_notification_interval)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )

    application.add_error_handler(error_handler)
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    setup_schedulers(application.bot)
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
